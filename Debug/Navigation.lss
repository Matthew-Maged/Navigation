
Navigation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00002254  000022e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000022e8  2**0
                  ALLOC
  3 .stab         00003a08  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015cd  00000000  00000000  00005cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000072bd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000072f0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000732c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00007812  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00007ccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_4>
      14:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_5>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_10>
      2c:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 36       	cpi	r26, 0x6B	; 107
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <main>
      74:	0c 94 28 11 	jmp	0x2250	; 0x2250 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_voidMoveForward>:
#include "APP_config.h"

static u8 APP_u8StopFlag = 0;

void APP_voidMoveForward(void)
{
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	DCM_voidRotateCcw(APP_RIGHT_MOTOR_PORT, APP_RIGHT_MOTOR_PIN1, APP_RIGHT_MOTOR_PIN2);
      84:	41 e0       	ldi	r20, 0x01	; 1
      86:	60 e0       	ldi	r22, 0x00	; 0
      88:	80 e0       	ldi	r24, 0x00	; 0
      8a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DCM_voidRotateCcw>
	DCM_voidRotateCcw(APP_LEFT_MOTOR_PORT, APP_LEFT_MOTOR_PIN1, APP_LEFT_MOTOR_PIN2);
      8e:	43 e0       	ldi	r20, 0x03	; 3
      90:	62 e0       	ldi	r22, 0x02	; 2
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DCM_voidRotateCcw>
}
      98:	00 00       	nop
      9a:	df 91       	pop	r29
      9c:	cf 91       	pop	r28
      9e:	08 95       	ret

000000a0 <APP_voidMoveBackward>:

void APP_voidMoveBackward(void)
{
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
      a4:	cd b7       	in	r28, 0x3d	; 61
      a6:	de b7       	in	r29, 0x3e	; 62
	DCM_voidRotateCw(APP_RIGHT_MOTOR_PORT, APP_RIGHT_MOTOR_PIN1, APP_RIGHT_MOTOR_PIN2);
      a8:	41 e0       	ldi	r20, 0x01	; 1
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	0e 94 24 06 	call	0xc48	; 0xc48 <DCM_voidRotateCw>
	DCM_voidRotateCw(APP_LEFT_MOTOR_PORT, APP_LEFT_MOTOR_PIN1, APP_LEFT_MOTOR_PIN2);
      b2:	43 e0       	ldi	r20, 0x03	; 3
      b4:	62 e0       	ldi	r22, 0x02	; 2
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	0e 94 24 06 	call	0xc48	; 0xc48 <DCM_voidRotateCw>
}
      bc:	00 00       	nop
      be:	df 91       	pop	r29
      c0:	cf 91       	pop	r28
      c2:	08 95       	ret

000000c4 <APP_voidTurnRight>:

void APP_voidTurnRight(void)
{
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
	DCM_voidRotateCcw(APP_LEFT_MOTOR_PORT, APP_LEFT_MOTOR_PIN1, APP_LEFT_MOTOR_PIN2);
      cc:	43 e0       	ldi	r20, 0x03	; 3
      ce:	62 e0       	ldi	r22, 0x02	; 2
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DCM_voidRotateCcw>
	DCM_voidStop(APP_RIGHT_MOTOR_PORT, APP_RIGHT_MOTOR_PIN1, APP_RIGHT_MOTOR_PIN2);
      d6:	41 e0       	ldi	r20, 0x01	; 1
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <DCM_voidStop>
}
      e0:	00 00       	nop
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <APP_voidTurnLeft>:

void APP_voidTurnLeft(void)
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
	DCM_voidRotateCcw(APP_RIGHT_MOTOR_PORT, APP_RIGHT_MOTOR_PIN1, APP_RIGHT_MOTOR_PIN2);
      f0:	41 e0       	ldi	r20, 0x01	; 1
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DCM_voidRotateCcw>
	DCM_voidStop(APP_LEFT_MOTOR_PORT, APP_LEFT_MOTOR_PIN1, APP_LEFT_MOTOR_PIN2);
      fa:	43 e0       	ldi	r20, 0x03	; 3
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 58 06 	call	0xcb0	; 0xcb0 <DCM_voidStop>
}
     104:	00 00       	nop
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <APP_voidStop>:

void APP_voidStop(void)
{
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
	DCM_voidStop(APP_RIGHT_MOTOR_PORT, APP_RIGHT_MOTOR_PIN1, APP_RIGHT_MOTOR_PIN2);
     114:	41 e0       	ldi	r20, 0x01	; 1
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <DCM_voidStop>
	DCM_voidStop(APP_LEFT_MOTOR_PORT, APP_LEFT_MOTOR_PIN1, APP_LEFT_MOTOR_PIN2);
     11e:	43 e0       	ldi	r20, 0x03	; 3
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 58 06 	call	0xcb0	; 0xcb0 <DCM_voidStop>
}
     128:	00 00       	nop
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <APP_u8GetRightIRState>:

u8 APP_u8GetRightIRState(void)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	1f 92       	push	r1
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Status = 0;
     13a:	19 82       	std	Y+1, r1	; 0x01
	IR_u8GetStatus(APP_RIGHT_IR_PORT, APP_RIGHT_IR_PIN, &Local_u8Status);
     13c:	ce 01       	movw	r24, r28
     13e:	01 96       	adiw	r24, 0x01	; 1
     140:	ac 01       	movw	r20, r24
     142:	64 e0       	ldi	r22, 0x04	; 4
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 3c 08 	call	0x1078	; 0x1078 <IR_u8GetStatus>
	return Local_u8Status;
     14a:	89 81       	ldd	r24, Y+1	; 0x01
}
     14c:	0f 90       	pop	r0
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <APP_u8GetLeftIRState>:

u8 APP_u8GetLeftIRState(void)
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	1f 92       	push	r1
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Status = 0;
     15e:	19 82       	std	Y+1, r1	; 0x01
	IR_u8GetStatus(APP_LEFT_IR_PORT, APP_LEFT_IR_PIN, &Local_u8Status);
     160:	ce 01       	movw	r24, r28
     162:	01 96       	adiw	r24, 0x01	; 1
     164:	ac 01       	movw	r20, r24
     166:	65 e0       	ldi	r22, 0x05	; 5
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 3c 08 	call	0x1078	; 0x1078 <IR_u8GetStatus>
	return Local_u8Status;
     16e:	89 81       	ldd	r24, Y+1	; 0x01
}
     170:	0f 90       	pop	r0
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <APP_voidFollowLine>:

void APP_voidFollowLine(void)
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	2e 97       	sbiw	r28, 0x0e	; 14
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
	if ((APP_u8GetRightIRState() == IR_OBJ_DETECTED) && (APP_u8GetLeftIRState() == IR_OBJ_DETECTED))
     18c:	0e 94 98 00 	call	0x130	; 0x130 <APP_u8GetRightIRState>
     190:	82 30       	cpi	r24, 0x02	; 2
     192:	39 f4       	brne	.+14     	; 0x1a2 <APP_voidFollowLine+0x2a>
     194:	0e 94 aa 00 	call	0x154	; 0x154 <APP_u8GetLeftIRState>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	19 f4       	brne	.+6      	; 0x1a2 <APP_voidFollowLine+0x2a>
	{
		APP_voidMoveForward();
     19c:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_voidMoveForward>
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <APP_voidFollowLine+0x15e>
	}
	else if ((APP_u8GetRightIRState() == IR_OBJ_DETECTED) && (APP_u8GetLeftIRState() == IR_OBJ_NOT_DETECTED))
     1a2:	0e 94 98 00 	call	0x130	; 0x130 <APP_u8GetRightIRState>
     1a6:	82 30       	cpi	r24, 0x02	; 2
     1a8:	39 f4       	brne	.+14     	; 0x1b8 <APP_voidFollowLine+0x40>
     1aa:	0e 94 aa 00 	call	0x154	; 0x154 <APP_u8GetLeftIRState>
     1ae:	83 30       	cpi	r24, 0x03	; 3
     1b0:	19 f4       	brne	.+6      	; 0x1b8 <APP_voidFollowLine+0x40>
	{
		APP_voidTurnLeft();
     1b2:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_voidTurnLeft>
     1b6:	8f c0       	rjmp	.+286    	; 0x2d6 <APP_voidFollowLine+0x15e>
	}
	else if ((APP_u8GetRightIRState() == IR_OBJ_NOT_DETECTED) && (APP_u8GetLeftIRState() == IR_OBJ_DETECTED))
     1b8:	0e 94 98 00 	call	0x130	; 0x130 <APP_u8GetRightIRState>
     1bc:	83 30       	cpi	r24, 0x03	; 3
     1be:	39 f4       	brne	.+14     	; 0x1ce <APP_voidFollowLine+0x56>
     1c0:	0e 94 aa 00 	call	0x154	; 0x154 <APP_u8GetLeftIRState>
     1c4:	82 30       	cpi	r24, 0x02	; 2
     1c6:	19 f4       	brne	.+6      	; 0x1ce <APP_voidFollowLine+0x56>
	{
		APP_voidTurnRight();
     1c8:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_voidTurnRight>
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <APP_voidFollowLine+0x15e>
	}
	else if ((APP_u8GetRightIRState() == IR_OBJ_NOT_DETECTED) && (APP_u8GetLeftIRState() == IR_OBJ_NOT_DETECTED))
     1ce:	0e 94 98 00 	call	0x130	; 0x130 <APP_u8GetRightIRState>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <APP_voidFollowLine+0x60>
     1d6:	7f c0       	rjmp	.+254    	; 0x2d6 <APP_voidFollowLine+0x15e>
     1d8:	0e 94 aa 00 	call	0x154	; 0x154 <APP_u8GetLeftIRState>
     1dc:	83 30       	cpi	r24, 0x03	; 3
     1de:	09 f0       	breq	.+2      	; 0x1e2 <APP_voidFollowLine+0x6a>
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <APP_voidFollowLine+0x15e>
	{
		APP_voidStop();
     1e2:	0e 94 86 00 	call	0x10c	; 0x10c <APP_voidStop>
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	aa ef       	ldi	r26, 0xFA	; 250
     1ec:	b3 e4       	ldi	r27, 0x43	; 67
     1ee:	89 83       	std	Y+1, r24	; 0x01
     1f0:	9a 83       	std	Y+2, r25	; 0x02
     1f2:	ab 83       	std	Y+3, r26	; 0x03
     1f4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	4a ef       	ldi	r20, 0xFA	; 250
     1fc:	54 e4       	ldi	r21, 0x44	; 68
     1fe:	69 81       	ldd	r22, Y+1	; 0x01
     200:	7a 81       	ldd	r23, Y+2	; 0x02
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	9c 81       	ldd	r25, Y+4	; 0x04
     206:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     20a:	dc 01       	movw	r26, r24
     20c:	cb 01       	movw	r24, r22
     20e:	8d 83       	std	Y+5, r24	; 0x05
     210:	9e 83       	std	Y+6, r25	; 0x06
     212:	af 83       	std	Y+7, r26	; 0x07
     214:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e8       	ldi	r20, 0x80	; 128
     21c:	5f e3       	ldi	r21, 0x3F	; 63
     21e:	6d 81       	ldd	r22, Y+5	; 0x05
     220:	7e 81       	ldd	r23, Y+6	; 0x06
     222:	8f 81       	ldd	r24, Y+7	; 0x07
     224:	98 85       	ldd	r25, Y+8	; 0x08
     226:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     22a:	88 23       	and	r24, r24
     22c:	2c f4       	brge	.+10     	; 0x238 <APP_voidFollowLine+0xc0>
		__ticks = 1;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	9a 87       	std	Y+10, r25	; 0x0a
     234:	89 87       	std	Y+9, r24	; 0x09
     236:	3f c0       	rjmp	.+126    	; 0x2b6 <APP_voidFollowLine+0x13e>
	else if (__tmp > 65535)
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	4f e7       	ldi	r20, 0x7F	; 127
     23e:	57 e4       	ldi	r21, 0x47	; 71
     240:	6d 81       	ldd	r22, Y+5	; 0x05
     242:	7e 81       	ldd	r23, Y+6	; 0x06
     244:	8f 81       	ldd	r24, Y+7	; 0x07
     246:	98 85       	ldd	r25, Y+8	; 0x08
     248:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     24c:	18 16       	cp	r1, r24
     24e:	4c f5       	brge	.+82     	; 0x2a2 <APP_voidFollowLine+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e2       	ldi	r20, 0x20	; 32
     256:	51 e4       	ldi	r21, 0x41	; 65
     258:	69 81       	ldd	r22, Y+1	; 0x01
     25a:	7a 81       	ldd	r23, Y+2	; 0x02
     25c:	8b 81       	ldd	r24, Y+3	; 0x03
     25e:	9c 81       	ldd	r25, Y+4	; 0x04
     260:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	bc 01       	movw	r22, r24
     26a:	cd 01       	movw	r24, r26
     26c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     270:	dc 01       	movw	r26, r24
     272:	cb 01       	movw	r24, r22
     274:	9a 87       	std	Y+10, r25	; 0x0a
     276:	89 87       	std	Y+9, r24	; 0x09
     278:	0f c0       	rjmp	.+30     	; 0x298 <APP_voidFollowLine+0x120>
     27a:	88 ec       	ldi	r24, 0xC8	; 200
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	9c 87       	std	Y+12, r25	; 0x0c
     280:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     282:	8b 85       	ldd	r24, Y+11	; 0x0b
     284:	9c 85       	ldd	r25, Y+12	; 0x0c
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <APP_voidFollowLine+0x10e>
     28a:	9c 87       	std	Y+12, r25	; 0x0c
     28c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     28e:	89 85       	ldd	r24, Y+9	; 0x09
     290:	9a 85       	ldd	r25, Y+10	; 0x0a
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	9a 87       	std	Y+10, r25	; 0x0a
     296:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     298:	89 85       	ldd	r24, Y+9	; 0x09
     29a:	9a 85       	ldd	r25, Y+10	; 0x0a
     29c:	89 2b       	or	r24, r25
     29e:	69 f7       	brne	.-38     	; 0x27a <APP_voidFollowLine+0x102>
     2a0:	14 c0       	rjmp	.+40     	; 0x2ca <APP_voidFollowLine+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	6d 81       	ldd	r22, Y+5	; 0x05
     2a4:	7e 81       	ldd	r23, Y+6	; 0x06
     2a6:	8f 81       	ldd	r24, Y+7	; 0x07
     2a8:	98 85       	ldd	r25, Y+8	; 0x08
     2aa:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     2ae:	dc 01       	movw	r26, r24
     2b0:	cb 01       	movw	r24, r22
     2b2:	9a 87       	std	Y+10, r25	; 0x0a
     2b4:	89 87       	std	Y+9, r24	; 0x09
     2b6:	89 85       	ldd	r24, Y+9	; 0x09
     2b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ba:	9e 87       	std	Y+14, r25	; 0x0e
     2bc:	8d 87       	std	Y+13, r24	; 0x0d
     2be:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c0:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <APP_voidFollowLine+0x14a>
     2c6:	9e 87       	std	Y+14, r25	; 0x0e
     2c8:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(APP_STOP_DELAY_MS);
		APP_voidMoveStep();
     2ca:	0e 94 8f 03 	call	0x71e	; 0x71e <APP_voidMoveStep>
		APP_u8StopFlag = 1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <APP_voidFollowLine+0x15e>
     2d6:	00 00       	nop
     2d8:	2e 96       	adiw	r28, 0x0e	; 14
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <APP_voidRotateRight90>:

void APP_voidRotateRight90(void)
{
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	6c 97       	sbiw	r28, 0x1c	; 28
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
	//TIMER2_voidSetCompareValue(180);
	APP_voidTurnRight(); //To make sure it's not on a black line*/
     2fe:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_voidTurnRight>
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	aa e7       	ldi	r26, 0x7A	; 122
     308:	b3 e4       	ldi	r27, 0x43	; 67
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	ab 83       	std	Y+3, r26	; 0x03
     310:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	4a ef       	ldi	r20, 0xFA	; 250
     318:	54 e4       	ldi	r21, 0x44	; 68
     31a:	69 81       	ldd	r22, Y+1	; 0x01
     31c:	7a 81       	ldd	r23, Y+2	; 0x02
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	9c 81       	ldd	r25, Y+4	; 0x04
     322:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	8d 83       	std	Y+5, r24	; 0x05
     32c:	9e 83       	std	Y+6, r25	; 0x06
     32e:	af 83       	std	Y+7, r26	; 0x07
     330:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e8       	ldi	r20, 0x80	; 128
     338:	5f e3       	ldi	r21, 0x3F	; 63
     33a:	6d 81       	ldd	r22, Y+5	; 0x05
     33c:	7e 81       	ldd	r23, Y+6	; 0x06
     33e:	8f 81       	ldd	r24, Y+7	; 0x07
     340:	98 85       	ldd	r25, Y+8	; 0x08
     342:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     346:	88 23       	and	r24, r24
     348:	2c f4       	brge	.+10     	; 0x354 <APP_voidRotateRight90+0x6a>
		__ticks = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	9a 87       	std	Y+10, r25	; 0x0a
     350:	89 87       	std	Y+9, r24	; 0x09
     352:	3f c0       	rjmp	.+126    	; 0x3d2 <APP_voidRotateRight90+0xe8>
	else if (__tmp > 65535)
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	3f ef       	ldi	r19, 0xFF	; 255
     358:	4f e7       	ldi	r20, 0x7F	; 127
     35a:	57 e4       	ldi	r21, 0x47	; 71
     35c:	6d 81       	ldd	r22, Y+5	; 0x05
     35e:	7e 81       	ldd	r23, Y+6	; 0x06
     360:	8f 81       	ldd	r24, Y+7	; 0x07
     362:	98 85       	ldd	r25, Y+8	; 0x08
     364:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     368:	18 16       	cp	r1, r24
     36a:	4c f5       	brge	.+82     	; 0x3be <APP_voidRotateRight90+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e2       	ldi	r20, 0x20	; 32
     372:	51 e4       	ldi	r21, 0x41	; 65
     374:	69 81       	ldd	r22, Y+1	; 0x01
     376:	7a 81       	ldd	r23, Y+2	; 0x02
     378:	8b 81       	ldd	r24, Y+3	; 0x03
     37a:	9c 81       	ldd	r25, Y+4	; 0x04
     37c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	bc 01       	movw	r22, r24
     386:	cd 01       	movw	r24, r26
     388:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	9a 87       	std	Y+10, r25	; 0x0a
     392:	89 87       	std	Y+9, r24	; 0x09
     394:	0f c0       	rjmp	.+30     	; 0x3b4 <APP_voidRotateRight90+0xca>
     396:	88 ec       	ldi	r24, 0xC8	; 200
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9c 87       	std	Y+12, r25	; 0x0c
     39c:	8b 87       	std	Y+11, r24	; 0x0b
     39e:	8b 85       	ldd	r24, Y+11	; 0x0b
     3a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <APP_voidRotateRight90+0xb8>
     3a6:	9c 87       	std	Y+12, r25	; 0x0c
     3a8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3aa:	89 85       	ldd	r24, Y+9	; 0x09
     3ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	9a 87       	std	Y+10, r25	; 0x0a
     3b2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b4:	89 85       	ldd	r24, Y+9	; 0x09
     3b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b8:	89 2b       	or	r24, r25
     3ba:	69 f7       	brne	.-38     	; 0x396 <APP_voidRotateRight90+0xac>
     3bc:	14 c0       	rjmp	.+40     	; 0x3e6 <APP_voidRotateRight90+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3be:	6d 81       	ldd	r22, Y+5	; 0x05
     3c0:	7e 81       	ldd	r23, Y+6	; 0x06
     3c2:	8f 81       	ldd	r24, Y+7	; 0x07
     3c4:	98 85       	ldd	r25, Y+8	; 0x08
     3c6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	9a 87       	std	Y+10, r25	; 0x0a
     3d0:	89 87       	std	Y+9, r24	; 0x09
     3d2:	89 85       	ldd	r24, Y+9	; 0x09
     3d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d6:	9e 87       	std	Y+14, r25	; 0x0e
     3d8:	8d 87       	std	Y+13, r24	; 0x0d
     3da:	8d 85       	ldd	r24, Y+13	; 0x0d
     3dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <APP_voidRotateRight90+0xf4>
     3e2:	9e 87       	std	Y+14, r25	; 0x0e
     3e4:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(APP_ROTATE_RIGHT_90_DELAY_MS);
	while(APP_u8GetRightIRState() == IR_OBJ_DETECTED)
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <APP_voidRotateRight90+0x102>
	{
		APP_voidTurnRight();
     3e8:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_voidTurnRight>
void APP_voidRotateRight90(void)
{
	//TIMER2_voidSetCompareValue(180);
	APP_voidTurnRight(); //To make sure it's not on a black line*/
	_delay_ms(APP_ROTATE_RIGHT_90_DELAY_MS);
	while(APP_u8GetRightIRState() == IR_OBJ_DETECTED)
     3ec:	0e 94 98 00 	call	0x130	; 0x130 <APP_u8GetRightIRState>
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	d1 f3       	breq	.-12     	; 0x3e8 <APP_voidRotateRight90+0xfe>
	{
		APP_voidTurnRight();
	}
	/*TIMER2_voidSetCompareValue(155);*/
	APP_voidStop();
     3f4:	0e 94 86 00 	call	0x10c	; 0x10c <APP_voidStop>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	aa ef       	ldi	r26, 0xFA	; 250
     3fe:	b3 e4       	ldi	r27, 0x43	; 67
     400:	8f 87       	std	Y+15, r24	; 0x0f
     402:	98 8b       	std	Y+16, r25	; 0x10
     404:	a9 8b       	std	Y+17, r26	; 0x11
     406:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	4a ef       	ldi	r20, 0xFA	; 250
     40e:	54 e4       	ldi	r21, 0x44	; 68
     410:	6f 85       	ldd	r22, Y+15	; 0x0f
     412:	78 89       	ldd	r23, Y+16	; 0x10
     414:	89 89       	ldd	r24, Y+17	; 0x11
     416:	9a 89       	ldd	r25, Y+18	; 0x12
     418:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	8b 8b       	std	Y+19, r24	; 0x13
     422:	9c 8b       	std	Y+20, r25	; 0x14
     424:	ad 8b       	std	Y+21, r26	; 0x15
     426:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e8       	ldi	r20, 0x80	; 128
     42e:	5f e3       	ldi	r21, 0x3F	; 63
     430:	6b 89       	ldd	r22, Y+19	; 0x13
     432:	7c 89       	ldd	r23, Y+20	; 0x14
     434:	8d 89       	ldd	r24, Y+21	; 0x15
     436:	9e 89       	ldd	r25, Y+22	; 0x16
     438:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     43c:	88 23       	and	r24, r24
     43e:	2c f4       	brge	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		__ticks = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	98 8f       	std	Y+24, r25	; 0x18
     446:	8f 8b       	std	Y+23, r24	; 0x17
     448:	3f c0       	rjmp	.+126    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
	else if (__tmp > 65535)
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	3f ef       	ldi	r19, 0xFF	; 255
     44e:	4f e7       	ldi	r20, 0x7F	; 127
     450:	57 e4       	ldi	r21, 0x47	; 71
     452:	6b 89       	ldd	r22, Y+19	; 0x13
     454:	7c 89       	ldd	r23, Y+20	; 0x14
     456:	8d 89       	ldd	r24, Y+21	; 0x15
     458:	9e 89       	ldd	r25, Y+22	; 0x16
     45a:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     45e:	18 16       	cp	r1, r24
     460:	4c f5       	brge	.+82     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	40 e2       	ldi	r20, 0x20	; 32
     468:	51 e4       	ldi	r21, 0x41	; 65
     46a:	6f 85       	ldd	r22, Y+15	; 0x0f
     46c:	78 89       	ldd	r23, Y+16	; 0x10
     46e:	89 89       	ldd	r24, Y+17	; 0x11
     470:	9a 89       	ldd	r25, Y+18	; 0x12
     472:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	bc 01       	movw	r22, r24
     47c:	cd 01       	movw	r24, r26
     47e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	98 8f       	std	Y+24, r25	; 0x18
     488:	8f 8b       	std	Y+23, r24	; 0x17
     48a:	0f c0       	rjmp	.+30     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     48c:	88 ec       	ldi	r24, 0xC8	; 200
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9a 8f       	std	Y+26, r25	; 0x1a
     492:	89 8f       	std	Y+25, r24	; 0x19
     494:	89 8d       	ldd	r24, Y+25	; 0x19
     496:	9a 8d       	ldd	r25, Y+26	; 0x1a
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     49c:	9a 8f       	std	Y+26, r25	; 0x1a
     49e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a0:	8f 89       	ldd	r24, Y+23	; 0x17
     4a2:	98 8d       	ldd	r25, Y+24	; 0x18
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	98 8f       	std	Y+24, r25	; 0x18
     4a8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4aa:	8f 89       	ldd	r24, Y+23	; 0x17
     4ac:	98 8d       	ldd	r25, Y+24	; 0x18
     4ae:	89 2b       	or	r24, r25
     4b0:	69 f7       	brne	.-38     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
	_delay_ms(APP_STOP_DELAY_MS);

}
     4b2:	14 c0       	rjmp	.+40     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b4:	6b 89       	ldd	r22, Y+19	; 0x13
     4b6:	7c 89       	ldd	r23, Y+20	; 0x14
     4b8:	8d 89       	ldd	r24, Y+21	; 0x15
     4ba:	9e 89       	ldd	r25, Y+22	; 0x16
     4bc:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	98 8f       	std	Y+24, r25	; 0x18
     4c6:	8f 8b       	std	Y+23, r24	; 0x17
     4c8:	8f 89       	ldd	r24, Y+23	; 0x17
     4ca:	98 8d       	ldd	r25, Y+24	; 0x18
     4cc:	9c 8f       	std	Y+28, r25	; 0x1c
     4ce:	8b 8f       	std	Y+27, r24	; 0x1b
     4d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d8:	9c 8f       	std	Y+28, r25	; 0x1c
     4da:	8b 8f       	std	Y+27, r24	; 0x1b
     4dc:	00 00       	nop
     4de:	6c 96       	adiw	r28, 0x1c	; 28
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <APP_voidRotateLeft90>:

void APP_voidRotateLeft90(void)
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	6c 97       	sbiw	r28, 0x1c	; 28
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
//	TIMER0_voidSetCompareValue(180);
	APP_voidTurnLeft(); //To make sure it's not on a black line
     504:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_voidTurnLeft>
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	aa e7       	ldi	r26, 0x7A	; 122
     50e:	b3 e4       	ldi	r27, 0x43	; 67
     510:	89 83       	std	Y+1, r24	; 0x01
     512:	9a 83       	std	Y+2, r25	; 0x02
     514:	ab 83       	std	Y+3, r26	; 0x03
     516:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	4a ef       	ldi	r20, 0xFA	; 250
     51e:	54 e4       	ldi	r21, 0x44	; 68
     520:	69 81       	ldd	r22, Y+1	; 0x01
     522:	7a 81       	ldd	r23, Y+2	; 0x02
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	9c 81       	ldd	r25, Y+4	; 0x04
     528:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	8d 83       	std	Y+5, r24	; 0x05
     532:	9e 83       	std	Y+6, r25	; 0x06
     534:	af 83       	std	Y+7, r26	; 0x07
     536:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e8       	ldi	r20, 0x80	; 128
     53e:	5f e3       	ldi	r21, 0x3F	; 63
     540:	6d 81       	ldd	r22, Y+5	; 0x05
     542:	7e 81       	ldd	r23, Y+6	; 0x06
     544:	8f 81       	ldd	r24, Y+7	; 0x07
     546:	98 85       	ldd	r25, Y+8	; 0x08
     548:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     54c:	88 23       	and	r24, r24
     54e:	2c f4       	brge	.+10     	; 0x55a <APP_voidRotateLeft90+0x6a>
		__ticks = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9a 87       	std	Y+10, r25	; 0x0a
     556:	89 87       	std	Y+9, r24	; 0x09
     558:	3f c0       	rjmp	.+126    	; 0x5d8 <APP_voidRotateLeft90+0xe8>
	else if (__tmp > 65535)
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	3f ef       	ldi	r19, 0xFF	; 255
     55e:	4f e7       	ldi	r20, 0x7F	; 127
     560:	57 e4       	ldi	r21, 0x47	; 71
     562:	6d 81       	ldd	r22, Y+5	; 0x05
     564:	7e 81       	ldd	r23, Y+6	; 0x06
     566:	8f 81       	ldd	r24, Y+7	; 0x07
     568:	98 85       	ldd	r25, Y+8	; 0x08
     56a:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     56e:	18 16       	cp	r1, r24
     570:	4c f5       	brge	.+82     	; 0x5c4 <APP_voidRotateLeft90+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	69 81       	ldd	r22, Y+1	; 0x01
     57c:	7a 81       	ldd	r23, Y+2	; 0x02
     57e:	8b 81       	ldd	r24, Y+3	; 0x03
     580:	9c 81       	ldd	r25, Y+4	; 0x04
     582:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	bc 01       	movw	r22, r24
     58c:	cd 01       	movw	r24, r26
     58e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9a 87       	std	Y+10, r25	; 0x0a
     598:	89 87       	std	Y+9, r24	; 0x09
     59a:	0f c0       	rjmp	.+30     	; 0x5ba <APP_voidRotateLeft90+0xca>
     59c:	88 ec       	ldi	r24, 0xC8	; 200
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	9c 87       	std	Y+12, r25	; 0x0c
     5a2:	8b 87       	std	Y+11, r24	; 0x0b
     5a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <APP_voidRotateLeft90+0xb8>
     5ac:	9c 87       	std	Y+12, r25	; 0x0c
     5ae:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b0:	89 85       	ldd	r24, Y+9	; 0x09
     5b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	9a 87       	std	Y+10, r25	; 0x0a
     5b8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ba:	89 85       	ldd	r24, Y+9	; 0x09
     5bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5be:	89 2b       	or	r24, r25
     5c0:	69 f7       	brne	.-38     	; 0x59c <APP_voidRotateLeft90+0xac>
     5c2:	14 c0       	rjmp	.+40     	; 0x5ec <APP_voidRotateLeft90+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5c4:	6d 81       	ldd	r22, Y+5	; 0x05
     5c6:	7e 81       	ldd	r23, Y+6	; 0x06
     5c8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ca:	98 85       	ldd	r25, Y+8	; 0x08
     5cc:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     5d0:	dc 01       	movw	r26, r24
     5d2:	cb 01       	movw	r24, r22
     5d4:	9a 87       	std	Y+10, r25	; 0x0a
     5d6:	89 87       	std	Y+9, r24	; 0x09
     5d8:	89 85       	ldd	r24, Y+9	; 0x09
     5da:	9a 85       	ldd	r25, Y+10	; 0x0a
     5dc:	9e 87       	std	Y+14, r25	; 0x0e
     5de:	8d 87       	std	Y+13, r24	; 0x0d
     5e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <APP_voidRotateLeft90+0xf4>
     5e8:	9e 87       	std	Y+14, r25	; 0x0e
     5ea:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(APP_ROTATE_LEFT_90_DELAY_MS);
	while(APP_u8GetLeftIRState() == IR_OBJ_DETECTED)
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <APP_voidRotateLeft90+0x102>
	{
		APP_voidTurnLeft();
     5ee:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_voidTurnLeft>
void APP_voidRotateLeft90(void)
{
//	TIMER0_voidSetCompareValue(180);
	APP_voidTurnLeft(); //To make sure it's not on a black line
	_delay_ms(APP_ROTATE_LEFT_90_DELAY_MS);
	while(APP_u8GetLeftIRState() == IR_OBJ_DETECTED)
     5f2:	0e 94 aa 00 	call	0x154	; 0x154 <APP_u8GetLeftIRState>
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	d1 f3       	breq	.-12     	; 0x5ee <APP_voidRotateLeft90+0xfe>
	{
		APP_voidTurnLeft();
	}
	/*TIMER0_voidSetCompareValue(150);*/
	//_delay_ms(50);
	APP_voidStop();
     5fa:	0e 94 86 00 	call	0x10c	; 0x10c <APP_voidStop>
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	aa ef       	ldi	r26, 0xFA	; 250
     604:	b3 e4       	ldi	r27, 0x43	; 67
     606:	8f 87       	std	Y+15, r24	; 0x0f
     608:	98 8b       	std	Y+16, r25	; 0x10
     60a:	a9 8b       	std	Y+17, r26	; 0x11
     60c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	4a ef       	ldi	r20, 0xFA	; 250
     614:	54 e4       	ldi	r21, 0x44	; 68
     616:	6f 85       	ldd	r22, Y+15	; 0x0f
     618:	78 89       	ldd	r23, Y+16	; 0x10
     61a:	89 89       	ldd	r24, Y+17	; 0x11
     61c:	9a 89       	ldd	r25, Y+18	; 0x12
     61e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     622:	dc 01       	movw	r26, r24
     624:	cb 01       	movw	r24, r22
     626:	8b 8b       	std	Y+19, r24	; 0x13
     628:	9c 8b       	std	Y+20, r25	; 0x14
     62a:	ad 8b       	std	Y+21, r26	; 0x15
     62c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e8       	ldi	r20, 0x80	; 128
     634:	5f e3       	ldi	r21, 0x3F	; 63
     636:	6b 89       	ldd	r22, Y+19	; 0x13
     638:	7c 89       	ldd	r23, Y+20	; 0x14
     63a:	8d 89       	ldd	r24, Y+21	; 0x15
     63c:	9e 89       	ldd	r25, Y+22	; 0x16
     63e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     642:	88 23       	and	r24, r24
     644:	2c f4       	brge	.+10     	; 0x650 <APP_voidRotateLeft90+0x160>
		__ticks = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	98 8f       	std	Y+24, r25	; 0x18
     64c:	8f 8b       	std	Y+23, r24	; 0x17
     64e:	3f c0       	rjmp	.+126    	; 0x6ce <APP_voidRotateLeft90+0x1de>
	else if (__tmp > 65535)
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	3f ef       	ldi	r19, 0xFF	; 255
     654:	4f e7       	ldi	r20, 0x7F	; 127
     656:	57 e4       	ldi	r21, 0x47	; 71
     658:	6b 89       	ldd	r22, Y+19	; 0x13
     65a:	7c 89       	ldd	r23, Y+20	; 0x14
     65c:	8d 89       	ldd	r24, Y+21	; 0x15
     65e:	9e 89       	ldd	r25, Y+22	; 0x16
     660:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     664:	18 16       	cp	r1, r24
     666:	4c f5       	brge	.+82     	; 0x6ba <APP_voidRotateLeft90+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 e2       	ldi	r20, 0x20	; 32
     66e:	51 e4       	ldi	r21, 0x41	; 65
     670:	6f 85       	ldd	r22, Y+15	; 0x0f
     672:	78 89       	ldd	r23, Y+16	; 0x10
     674:	89 89       	ldd	r24, Y+17	; 0x11
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	bc 01       	movw	r22, r24
     682:	cd 01       	movw	r24, r26
     684:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	98 8f       	std	Y+24, r25	; 0x18
     68e:	8f 8b       	std	Y+23, r24	; 0x17
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <APP_voidRotateLeft90+0x1c0>
     692:	88 ec       	ldi	r24, 0xC8	; 200
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	9a 8f       	std	Y+26, r25	; 0x1a
     698:	89 8f       	std	Y+25, r24	; 0x19
     69a:	89 8d       	ldd	r24, Y+25	; 0x19
     69c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <APP_voidRotateLeft90+0x1ae>
     6a2:	9a 8f       	std	Y+26, r25	; 0x1a
     6a4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a6:	8f 89       	ldd	r24, Y+23	; 0x17
     6a8:	98 8d       	ldd	r25, Y+24	; 0x18
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	98 8f       	std	Y+24, r25	; 0x18
     6ae:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b0:	8f 89       	ldd	r24, Y+23	; 0x17
     6b2:	98 8d       	ldd	r25, Y+24	; 0x18
     6b4:	89 2b       	or	r24, r25
     6b6:	69 f7       	brne	.-38     	; 0x692 <APP_voidRotateLeft90+0x1a2>
	_delay_ms(APP_STOP_DELAY_MS);
}
     6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <APP_voidRotateLeft90+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ba:	6b 89       	ldd	r22, Y+19	; 0x13
     6bc:	7c 89       	ldd	r23, Y+20	; 0x14
     6be:	8d 89       	ldd	r24, Y+21	; 0x15
     6c0:	9e 89       	ldd	r25, Y+22	; 0x16
     6c2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	98 8f       	std	Y+24, r25	; 0x18
     6cc:	8f 8b       	std	Y+23, r24	; 0x17
     6ce:	8f 89       	ldd	r24, Y+23	; 0x17
     6d0:	98 8d       	ldd	r25, Y+24	; 0x18
     6d2:	9c 8f       	std	Y+28, r25	; 0x1c
     6d4:	8b 8f       	std	Y+27, r24	; 0x1b
     6d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <APP_voidRotateLeft90+0x1ea>
     6de:	9c 8f       	std	Y+28, r25	; 0x1c
     6e0:	8b 8f       	std	Y+27, r24	; 0x1b
     6e2:	00 00       	nop
     6e4:	6c 96       	adiw	r28, 0x1c	; 28
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <APP_voidRotateDown180>:

void APP_voidRotateDown180(void)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Counter;
	for(Local_u8Counter = 0; Local_u8Counter < 2; Local_u8Counter++)
     700:	19 82       	std	Y+1, r1	; 0x01
     702:	05 c0       	rjmp	.+10     	; 0x70e <APP_voidRotateDown180+0x18>
	{
		APP_voidRotateRight90();
     704:	0e 94 75 01 	call	0x2ea	; 0x2ea <APP_voidRotateRight90>
}

void APP_voidRotateDown180(void)
{
	u8 Local_u8Counter;
	for(Local_u8Counter = 0; Local_u8Counter < 2; Local_u8Counter++)
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	89 83       	std	Y+1, r24	; 0x01
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	c0 f3       	brcs	.-16     	; 0x704 <APP_voidRotateDown180+0xe>

	/*APP_voidTurnRight();
	_delay_ms(APP_ROTATE_DOWN_180_DELAY_MS);
	APP_voidStop();
	_delay_ms(APP_STOP_DELAY_MS);*/
}
     714:	00 00       	nop
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <APP_voidMoveStep>:

void APP_voidMoveStep(void)
{
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	6c 97       	sbiw	r28, 0x1c	; 28
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
	APP_voidMoveForward();
     732:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_voidMoveForward>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	a8 e4       	ldi	r26, 0x48	; 72
     73c:	b3 e4       	ldi	r27, 0x43	; 67
     73e:	8f 87       	std	Y+15, r24	; 0x0f
     740:	98 8b       	std	Y+16, r25	; 0x10
     742:	a9 8b       	std	Y+17, r26	; 0x11
     744:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	4a ef       	ldi	r20, 0xFA	; 250
     74c:	54 e4       	ldi	r21, 0x44	; 68
     74e:	6f 85       	ldd	r22, Y+15	; 0x0f
     750:	78 89       	ldd	r23, Y+16	; 0x10
     752:	89 89       	ldd	r24, Y+17	; 0x11
     754:	9a 89       	ldd	r25, Y+18	; 0x12
     756:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	8b 8b       	std	Y+19, r24	; 0x13
     760:	9c 8b       	std	Y+20, r25	; 0x14
     762:	ad 8b       	std	Y+21, r26	; 0x15
     764:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e8       	ldi	r20, 0x80	; 128
     76c:	5f e3       	ldi	r21, 0x3F	; 63
     76e:	6b 89       	ldd	r22, Y+19	; 0x13
     770:	7c 89       	ldd	r23, Y+20	; 0x14
     772:	8d 89       	ldd	r24, Y+21	; 0x15
     774:	9e 89       	ldd	r25, Y+22	; 0x16
     776:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     77a:	88 23       	and	r24, r24
     77c:	2c f4       	brge	.+10     	; 0x788 <APP_voidMoveStep+0x6a>
		__ticks = 1;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	98 8f       	std	Y+24, r25	; 0x18
     784:	8f 8b       	std	Y+23, r24	; 0x17
     786:	3f c0       	rjmp	.+126    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	else if (__tmp > 65535)
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	3f ef       	ldi	r19, 0xFF	; 255
     78c:	4f e7       	ldi	r20, 0x7F	; 127
     78e:	57 e4       	ldi	r21, 0x47	; 71
     790:	6b 89       	ldd	r22, Y+19	; 0x13
     792:	7c 89       	ldd	r23, Y+20	; 0x14
     794:	8d 89       	ldd	r24, Y+21	; 0x15
     796:	9e 89       	ldd	r25, Y+22	; 0x16
     798:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     79c:	18 16       	cp	r1, r24
     79e:	4c f5       	brge	.+82     	; 0x7f2 <APP_voidMoveStep+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	40 e2       	ldi	r20, 0x20	; 32
     7a6:	51 e4       	ldi	r21, 0x41	; 65
     7a8:	6f 85       	ldd	r22, Y+15	; 0x0f
     7aa:	78 89       	ldd	r23, Y+16	; 0x10
     7ac:	89 89       	ldd	r24, Y+17	; 0x11
     7ae:	9a 89       	ldd	r25, Y+18	; 0x12
     7b0:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	bc 01       	movw	r22, r24
     7ba:	cd 01       	movw	r24, r26
     7bc:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	98 8f       	std	Y+24, r25	; 0x18
     7c6:	8f 8b       	std	Y+23, r24	; 0x17
     7c8:	0f c0       	rjmp	.+30     	; 0x7e8 <APP_voidMoveStep+0xca>
     7ca:	88 ec       	ldi	r24, 0xC8	; 200
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	9a 8f       	std	Y+26, r25	; 0x1a
     7d0:	89 8f       	std	Y+25, r24	; 0x19
     7d2:	89 8d       	ldd	r24, Y+25	; 0x19
     7d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <APP_voidMoveStep+0xb8>
     7da:	9a 8f       	std	Y+26, r25	; 0x1a
     7dc:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7de:	8f 89       	ldd	r24, Y+23	; 0x17
     7e0:	98 8d       	ldd	r25, Y+24	; 0x18
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	98 8f       	std	Y+24, r25	; 0x18
     7e6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e8:	8f 89       	ldd	r24, Y+23	; 0x17
     7ea:	98 8d       	ldd	r25, Y+24	; 0x18
     7ec:	89 2b       	or	r24, r25
     7ee:	69 f7       	brne	.-38     	; 0x7ca <APP_voidMoveStep+0xac>
     7f0:	14 c0       	rjmp	.+40     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7f2:	6b 89       	ldd	r22, Y+19	; 0x13
     7f4:	7c 89       	ldd	r23, Y+20	; 0x14
     7f6:	8d 89       	ldd	r24, Y+21	; 0x15
     7f8:	9e 89       	ldd	r25, Y+22	; 0x16
     7fa:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     7fe:	dc 01       	movw	r26, r24
     800:	cb 01       	movw	r24, r22
     802:	98 8f       	std	Y+24, r25	; 0x18
     804:	8f 8b       	std	Y+23, r24	; 0x17
     806:	8f 89       	ldd	r24, Y+23	; 0x17
     808:	98 8d       	ldd	r25, Y+24	; 0x18
     80a:	9c 8f       	std	Y+28, r25	; 0x1c
     80c:	8b 8f       	std	Y+27, r24	; 0x1b
     80e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     810:	9c 8d       	ldd	r25, Y+28	; 0x1c
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     816:	9c 8f       	std	Y+28, r25	; 0x1c
     818:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(APP_MOVE_STEP_DELAY_MS);
	APP_voidStop();
     81a:	0e 94 86 00 	call	0x10c	; 0x10c <APP_voidStop>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	aa ef       	ldi	r26, 0xFA	; 250
     824:	b3 e4       	ldi	r27, 0x43	; 67
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	ab 83       	std	Y+3, r26	; 0x03
     82c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	4a ef       	ldi	r20, 0xFA	; 250
     834:	54 e4       	ldi	r21, 0x44	; 68
     836:	69 81       	ldd	r22, Y+1	; 0x01
     838:	7a 81       	ldd	r23, Y+2	; 0x02
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	9c 81       	ldd	r25, Y+4	; 0x04
     83e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	8d 83       	std	Y+5, r24	; 0x05
     848:	9e 83       	std	Y+6, r25	; 0x06
     84a:	af 83       	std	Y+7, r26	; 0x07
     84c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	6d 81       	ldd	r22, Y+5	; 0x05
     858:	7e 81       	ldd	r23, Y+6	; 0x06
     85a:	8f 81       	ldd	r24, Y+7	; 0x07
     85c:	98 85       	ldd	r25, Y+8	; 0x08
     85e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     862:	88 23       	and	r24, r24
     864:	2c f4       	brge	.+10     	; 0x870 <__stack+0x11>
		__ticks = 1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9a 87       	std	Y+10, r25	; 0x0a
     86c:	89 87       	std	Y+9, r24	; 0x09
     86e:	3f c0       	rjmp	.+126    	; 0x8ee <__stack+0x8f>
	else if (__tmp > 65535)
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	6d 81       	ldd	r22, Y+5	; 0x05
     87a:	7e 81       	ldd	r23, Y+6	; 0x06
     87c:	8f 81       	ldd	r24, Y+7	; 0x07
     87e:	98 85       	ldd	r25, Y+8	; 0x08
     880:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     884:	18 16       	cp	r1, r24
     886:	4c f5       	brge	.+82     	; 0x8da <__stack+0x7b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	69 81       	ldd	r22, Y+1	; 0x01
     892:	7a 81       	ldd	r23, Y+2	; 0x02
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	9a 87       	std	Y+10, r25	; 0x0a
     8ae:	89 87       	std	Y+9, r24	; 0x09
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <__stack+0x71>
     8b2:	88 ec       	ldi	r24, 0xC8	; 200
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9c 87       	std	Y+12, r25	; 0x0c
     8b8:	8b 87       	std	Y+11, r24	; 0x0b
     8ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     8bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <__stack+0x5f>
     8c2:	9c 87       	std	Y+12, r25	; 0x0c
     8c4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	9a 87       	std	Y+10, r25	; 0x0a
     8ce:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8d0:	89 85       	ldd	r24, Y+9	; 0x09
     8d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d4:	89 2b       	or	r24, r25
     8d6:	69 f7       	brne	.-38     	; 0x8b2 <__stack+0x53>
	_delay_ms(APP_STOP_DELAY_MS);
}
     8d8:	14 c0       	rjmp	.+40     	; 0x902 <__stack+0xa3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8da:	6d 81       	ldd	r22, Y+5	; 0x05
     8dc:	7e 81       	ldd	r23, Y+6	; 0x06
     8de:	8f 81       	ldd	r24, Y+7	; 0x07
     8e0:	98 85       	ldd	r25, Y+8	; 0x08
     8e2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
     8ea:	9a 87       	std	Y+10, r25	; 0x0a
     8ec:	89 87       	std	Y+9, r24	; 0x09
     8ee:	89 85       	ldd	r24, Y+9	; 0x09
     8f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f2:	9e 87       	std	Y+14, r25	; 0x0e
     8f4:	8d 87       	std	Y+13, r24	; 0x0d
     8f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <__stack+0x9b>
     8fe:	9e 87       	std	Y+14, r25	; 0x0e
     900:	8d 87       	std	Y+13, r24	; 0x0d
     902:	00 00       	nop
     904:	6c 96       	adiw	r28, 0x1c	; 28
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <APP_u8GoToXY>:

u8 APP_u8GoToXY(s8 Copy_s8CoordinateX, s8 Copy_s8CoordinateY)
{
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	00 d0       	rcall	.+0      	; 0x91c <APP_u8GoToXY+0x6>
     91c:	00 d0       	rcall	.+0      	; 0x91e <APP_u8GoToXY+0x8>
     91e:	00 d0       	rcall	.+0      	; 0x920 <APP_u8GoToXY+0xa>
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	8d 83       	std	Y+5, r24	; 0x05
     926:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_u8ErrorState = OK;
     928:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_s8Counter = 0;
     92a:	19 82       	std	Y+1, r1	; 0x01
	s8 Local_s8StepsX = 0;
     92c:	1b 82       	std	Y+3, r1	; 0x03
	s8 Local_s8StepsY = 0;
     92e:	1c 82       	std	Y+4, r1	; 0x04

	static s8 Local_s8CurrentX = 0;
	static s8 Local_s8CurrentY = 0;

	Local_s8StepsX = Copy_s8CoordinateX - Local_s8CurrentX;
     930:	8d 81       	ldd	r24, Y+5	; 0x05
     932:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Local_s8CurrentX.1780>
     936:	89 1b       	sub	r24, r25
     938:	8b 83       	std	Y+3, r24	; 0x03
	Local_s8StepsY = Copy_s8CoordinateY - Local_s8CurrentY;
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Local_s8CurrentY.1781>
     940:	89 1b       	sub	r24, r25
     942:	8c 83       	std	Y+4, r24	; 0x04


	if((Copy_s8CoordinateX > 0) && (Copy_s8CoordinateY > 0))
     944:	8d 81       	ldd	r24, Y+5	; 0x05
     946:	18 16       	cp	r1, r24
     948:	64 f5       	brge	.+88     	; 0x9a2 <APP_u8GoToXY+0x8c>
     94a:	8e 81       	ldd	r24, Y+6	; 0x06
     94c:	18 16       	cp	r1, r24
     94e:	4c f5       	brge	.+82     	; 0x9a2 <APP_u8GoToXY+0x8c>
	{
		for(Local_s8Counter = 0; Local_s8Counter<Local_s8StepsY; Local_s8Counter++)
     950:	19 82       	std	Y+1, r1	; 0x01
     952:	0c c0       	rjmp	.+24     	; 0x96c <APP_u8GoToXY+0x56>
		{
			APP_u8StopFlag = 0;
     954:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			while(APP_u8StopFlag == 0)
     958:	02 c0       	rjmp	.+4      	; 0x95e <APP_u8GoToXY+0x48>
			{
				APP_voidFollowLine();
     95a:	0e 94 bc 00 	call	0x178	; 0x178 <APP_voidFollowLine>
	if((Copy_s8CoordinateX > 0) && (Copy_s8CoordinateY > 0))
	{
		for(Local_s8Counter = 0; Local_s8Counter<Local_s8StepsY; Local_s8Counter++)
		{
			APP_u8StopFlag = 0;
			while(APP_u8StopFlag == 0)
     95e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     962:	88 23       	and	r24, r24
     964:	d1 f3       	breq	.-12     	; 0x95a <APP_u8GoToXY+0x44>
	Local_s8StepsY = Copy_s8CoordinateY - Local_s8CurrentY;


	if((Copy_s8CoordinateX > 0) && (Copy_s8CoordinateY > 0))
	{
		for(Local_s8Counter = 0; Local_s8Counter<Local_s8StepsY; Local_s8Counter++)
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	99 81       	ldd	r25, Y+1	; 0x01
     96e:	8c 81       	ldd	r24, Y+4	; 0x04
     970:	98 17       	cp	r25, r24
     972:	84 f3       	brlt	.-32     	; 0x954 <APP_u8GoToXY+0x3e>
			while(APP_u8StopFlag == 0)
			{
				APP_voidFollowLine();
			}
		}
		APP_voidRotateRight90();
     974:	0e 94 75 01 	call	0x2ea	; 0x2ea <APP_voidRotateRight90>
		for(Local_s8Counter = 0; Local_s8Counter<Local_s8StepsX; Local_s8Counter++)
     978:	19 82       	std	Y+1, r1	; 0x01
     97a:	0c c0       	rjmp	.+24     	; 0x994 <APP_u8GoToXY+0x7e>
		{
			APP_u8StopFlag = 0;
     97c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			while(APP_u8StopFlag == 0)
     980:	02 c0       	rjmp	.+4      	; 0x986 <APP_u8GoToXY+0x70>
			{
				APP_voidFollowLine();
     982:	0e 94 bc 00 	call	0x178	; 0x178 <APP_voidFollowLine>
		}
		APP_voidRotateRight90();
		for(Local_s8Counter = 0; Local_s8Counter<Local_s8StepsX; Local_s8Counter++)
		{
			APP_u8StopFlag = 0;
			while(APP_u8StopFlag == 0)
     986:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     98a:	88 23       	and	r24, r24
     98c:	d1 f3       	breq	.-12     	; 0x982 <APP_u8GoToXY+0x6c>
			{
				APP_voidFollowLine();
			}
		}
		APP_voidRotateRight90();
		for(Local_s8Counter = 0; Local_s8Counter<Local_s8StepsX; Local_s8Counter++)
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	99 81       	ldd	r25, Y+1	; 0x01
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	98 17       	cp	r25, r24
     99a:	84 f3       	brlt	.-32     	; 0x97c <APP_u8GoToXY+0x66>
			while(APP_u8StopFlag == 0)
			{
				APP_voidFollowLine();
			}
		}
		APP_voidRotateLeft90();
     99c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <APP_voidRotateLeft90>
     9a0:	30 c0       	rjmp	.+96     	; 0xa02 <APP_u8GoToXY+0xec>
	}

	else if((Copy_s8CoordinateX <= 0) && (Copy_s8CoordinateY <= 0))
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	18 16       	cp	r1, r24
     9a6:	6c f1       	brlt	.+90     	; 0xa02 <APP_u8GoToXY+0xec>
     9a8:	8e 81       	ldd	r24, Y+6	; 0x06
     9aa:	18 16       	cp	r1, r24
     9ac:	54 f1       	brlt	.+84     	; 0xa02 <APP_u8GoToXY+0xec>
	{
		APP_voidRotateDown180();
     9ae:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <APP_voidRotateDown180>

		for(Local_s8Counter = Local_s8StepsY; Local_s8Counter != 0; Local_s8Counter++)
     9b2:	8c 81       	ldd	r24, Y+4	; 0x04
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	0c c0       	rjmp	.+24     	; 0x9d0 <APP_u8GoToXY+0xba>
		{
			APP_u8StopFlag = 0;
     9b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			while(APP_u8StopFlag == 0)
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <APP_u8GoToXY+0xac>
			{
				APP_voidFollowLine();
     9be:	0e 94 bc 00 	call	0x178	; 0x178 <APP_voidFollowLine>
		APP_voidRotateDown180();

		for(Local_s8Counter = Local_s8StepsY; Local_s8Counter != 0; Local_s8Counter++)
		{
			APP_u8StopFlag = 0;
			while(APP_u8StopFlag == 0)
     9c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9c6:	88 23       	and	r24, r24
     9c8:	d1 f3       	breq	.-12     	; 0x9be <APP_u8GoToXY+0xa8>

	else if((Copy_s8CoordinateX <= 0) && (Copy_s8CoordinateY <= 0))
	{
		APP_voidRotateDown180();

		for(Local_s8Counter = Local_s8StepsY; Local_s8Counter != 0; Local_s8Counter++)
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	88 23       	and	r24, r24
     9d4:	89 f7       	brne	.-30     	; 0x9b8 <APP_u8GoToXY+0xa2>
			{
				APP_voidFollowLine();
			}
		}

		APP_voidRotateRight90();
     9d6:	0e 94 75 01 	call	0x2ea	; 0x2ea <APP_voidRotateRight90>
		for(Local_s8Counter = Local_s8StepsX; Local_s8Counter != 0; Local_s8Counter++)
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	0c c0       	rjmp	.+24     	; 0x9f8 <APP_u8GoToXY+0xe2>
		{
			APP_u8StopFlag = 0;
     9e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			while(APP_u8StopFlag == 0)
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <APP_u8GoToXY+0xd4>
			{
				APP_voidFollowLine();
     9e6:	0e 94 bc 00 	call	0x178	; 0x178 <APP_voidFollowLine>

		APP_voidRotateRight90();
		for(Local_s8Counter = Local_s8StepsX; Local_s8Counter != 0; Local_s8Counter++)
		{
			APP_u8StopFlag = 0;
			while(APP_u8StopFlag == 0)
     9ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9ee:	88 23       	and	r24, r24
     9f0:	d1 f3       	breq	.-12     	; 0x9e6 <APP_u8GoToXY+0xd0>
				APP_voidFollowLine();
			}
		}

		APP_voidRotateRight90();
		for(Local_s8Counter = Local_s8StepsX; Local_s8Counter != 0; Local_s8Counter++)
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	88 23       	and	r24, r24
     9fc:	89 f7       	brne	.-30     	; 0x9e0 <APP_u8GoToXY+0xca>
			while(APP_u8StopFlag == 0)
			{
				APP_voidFollowLine();
			}
		}
		APP_voidRotateRight90();
     9fe:	0e 94 75 01 	call	0x2ea	; 0x2ea <APP_voidRotateRight90>
	}

	Local_s8CurrentX = Copy_s8CoordinateX;
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Local_s8CurrentX.1780>
	Local_s8CurrentY = Copy_s8CoordinateY;
     a08:	8e 81       	ldd	r24, Y+6	; 0x06
     a0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Local_s8CurrentY.1781>

	return Local_u8ErrorState;
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     a10:	26 96       	adiw	r28, 0x06	; 6
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <APP_u8GoToLine>:

u8 APP_u8GoToLine(u8 Copy_u8LineNumber)
{
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	6f 97       	sbiw	r28, 0x1f	; 31
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 Local_u8Counter;
	u8 Local_u8ErrorState = OK;
     a38:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8LineNumber <= 3)
     a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a3c:	84 30       	cpi	r24, 0x04	; 4
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <APP_u8GoToLine+0x20>
     a40:	f7 c0       	rjmp	.+494    	; 0xc30 <APP_u8GoToLine+0x20e>
	{
		for(Local_u8Counter = 0; Local_u8Counter != Copy_u8LineNumber; Local_u8Counter++)
     a42:	19 82       	std	Y+1, r1	; 0x01
     a44:	ef c0       	rjmp	.+478    	; 0xc24 <APP_u8GoToLine+0x202>
		{
			while(APP_u8GetLeftIRState() == IR_OBJ_DETECTED)
			{
				APP_voidTurnLeft();
     a46:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_voidTurnLeft>
	u8 Local_u8ErrorState = OK;
	if(Copy_u8LineNumber <= 3)
	{
		for(Local_u8Counter = 0; Local_u8Counter != Copy_u8LineNumber; Local_u8Counter++)
		{
			while(APP_u8GetLeftIRState() == IR_OBJ_DETECTED)
     a4a:	0e 94 aa 00 	call	0x154	; 0x154 <APP_u8GetLeftIRState>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	d1 f3       	breq	.-12     	; 0xa46 <APP_u8GoToLine+0x24>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a8 e4       	ldi	r26, 0x48	; 72
     a58:	b2 e4       	ldi	r27, 0x42	; 66
     a5a:	89 8b       	std	Y+17, r24	; 0x11
     a5c:	9a 8b       	std	Y+18, r25	; 0x12
     a5e:	ab 8b       	std	Y+19, r26	; 0x13
     a60:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	4a ef       	ldi	r20, 0xFA	; 250
     a68:	54 e4       	ldi	r21, 0x44	; 68
     a6a:	69 89       	ldd	r22, Y+17	; 0x11
     a6c:	7a 89       	ldd	r23, Y+18	; 0x12
     a6e:	8b 89       	ldd	r24, Y+19	; 0x13
     a70:	9c 89       	ldd	r25, Y+20	; 0x14
     a72:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	8d 8b       	std	Y+21, r24	; 0x15
     a7c:	9e 8b       	std	Y+22, r25	; 0x16
     a7e:	af 8b       	std	Y+23, r26	; 0x17
     a80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e8       	ldi	r20, 0x80	; 128
     a88:	5f e3       	ldi	r21, 0x3F	; 63
     a8a:	6d 89       	ldd	r22, Y+21	; 0x15
     a8c:	7e 89       	ldd	r23, Y+22	; 0x16
     a8e:	8f 89       	ldd	r24, Y+23	; 0x17
     a90:	98 8d       	ldd	r25, Y+24	; 0x18
     a92:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     a96:	88 23       	and	r24, r24
     a98:	2c f4       	brge	.+10     	; 0xaa4 <APP_u8GoToLine+0x82>
		__ticks = 1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	9a 8f       	std	Y+26, r25	; 0x1a
     aa0:	89 8f       	std	Y+25, r24	; 0x19
     aa2:	3f c0       	rjmp	.+126    	; 0xb22 <APP_u8GoToLine+0x100>
	else if (__tmp > 65535)
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	4f e7       	ldi	r20, 0x7F	; 127
     aaa:	57 e4       	ldi	r21, 0x47	; 71
     aac:	6d 89       	ldd	r22, Y+21	; 0x15
     aae:	7e 89       	ldd	r23, Y+22	; 0x16
     ab0:	8f 89       	ldd	r24, Y+23	; 0x17
     ab2:	98 8d       	ldd	r25, Y+24	; 0x18
     ab4:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     ab8:	18 16       	cp	r1, r24
     aba:	4c f5       	brge	.+82     	; 0xb0e <APP_u8GoToLine+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e2       	ldi	r20, 0x20	; 32
     ac2:	51 e4       	ldi	r21, 0x41	; 65
     ac4:	69 89       	ldd	r22, Y+17	; 0x11
     ac6:	7a 89       	ldd	r23, Y+18	; 0x12
     ac8:	8b 89       	ldd	r24, Y+19	; 0x13
     aca:	9c 89       	ldd	r25, Y+20	; 0x14
     acc:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	bc 01       	movw	r22, r24
     ad6:	cd 01       	movw	r24, r26
     ad8:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	9a 8f       	std	Y+26, r25	; 0x1a
     ae2:	89 8f       	std	Y+25, r24	; 0x19
     ae4:	0f c0       	rjmp	.+30     	; 0xb04 <APP_u8GoToLine+0xe2>
     ae6:	88 ec       	ldi	r24, 0xC8	; 200
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	9c 8f       	std	Y+28, r25	; 0x1c
     aec:	8b 8f       	std	Y+27, r24	; 0x1b
     aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <APP_u8GoToLine+0xd0>
     af6:	9c 8f       	std	Y+28, r25	; 0x1c
     af8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     afa:	89 8d       	ldd	r24, Y+25	; 0x19
     afc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	9a 8f       	std	Y+26, r25	; 0x1a
     b02:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b04:	89 8d       	ldd	r24, Y+25	; 0x19
     b06:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b08:	89 2b       	or	r24, r25
     b0a:	69 f7       	brne	.-38     	; 0xae6 <APP_u8GoToLine+0xc4>
     b0c:	14 c0       	rjmp	.+40     	; 0xb36 <APP_u8GoToLine+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b0e:	6d 89       	ldd	r22, Y+21	; 0x15
     b10:	7e 89       	ldd	r23, Y+22	; 0x16
     b12:	8f 89       	ldd	r24, Y+23	; 0x17
     b14:	98 8d       	ldd	r25, Y+24	; 0x18
     b16:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	9a 8f       	std	Y+26, r25	; 0x1a
     b20:	89 8f       	std	Y+25, r24	; 0x19
     b22:	89 8d       	ldd	r24, Y+25	; 0x19
     b24:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b26:	9e 8f       	std	Y+30, r25	; 0x1e
     b28:	8d 8f       	std	Y+29, r24	; 0x1d
     b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <APP_u8GoToLine+0x10c>
     b32:	9e 8f       	std	Y+30, r25	; 0x1e
     b34:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				APP_voidTurnLeft();
			}
			_delay_ms(50);
			APP_voidStop();
     b36:	0e 94 86 00 	call	0x10c	; 0x10c <APP_voidStop>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e8       	ldi	r25, 0x80	; 128
     b3e:	ab e3       	ldi	r26, 0x3B	; 59
     b40:	b5 e4       	ldi	r27, 0x45	; 69
     b42:	8b 83       	std	Y+3, r24	; 0x03
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	ad 83       	std	Y+5, r26	; 0x05
     b48:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	4a ef       	ldi	r20, 0xFA	; 250
     b50:	54 e4       	ldi	r21, 0x44	; 68
     b52:	6b 81       	ldd	r22, Y+3	; 0x03
     b54:	7c 81       	ldd	r23, Y+4	; 0x04
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	9e 81       	ldd	r25, Y+6	; 0x06
     b5a:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     b5e:	dc 01       	movw	r26, r24
     b60:	cb 01       	movw	r24, r22
     b62:	8f 83       	std	Y+7, r24	; 0x07
     b64:	98 87       	std	Y+8, r25	; 0x08
     b66:	a9 87       	std	Y+9, r26	; 0x09
     b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e8       	ldi	r20, 0x80	; 128
     b70:	5f e3       	ldi	r21, 0x3F	; 63
     b72:	6f 81       	ldd	r22, Y+7	; 0x07
     b74:	78 85       	ldd	r23, Y+8	; 0x08
     b76:	89 85       	ldd	r24, Y+9	; 0x09
     b78:	9a 85       	ldd	r25, Y+10	; 0x0a
     b7a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
     b7e:	88 23       	and	r24, r24
     b80:	2c f4       	brge	.+10     	; 0xb8c <APP_u8GoToLine+0x16a>
		__ticks = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	8b 87       	std	Y+11, r24	; 0x0b
     b8a:	3f c0       	rjmp	.+126    	; 0xc0a <APP_u8GoToLine+0x1e8>
	else if (__tmp > 65535)
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	3f ef       	ldi	r19, 0xFF	; 255
     b90:	4f e7       	ldi	r20, 0x7F	; 127
     b92:	57 e4       	ldi	r21, 0x47	; 71
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
     ba0:	18 16       	cp	r1, r24
     ba2:	4c f5       	brge	.+82     	; 0xbf6 <APP_u8GoToLine+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e2       	ldi	r20, 0x20	; 32
     baa:	51 e4       	ldi	r21, 0x41	; 65
     bac:	6b 81       	ldd	r22, Y+3	; 0x03
     bae:	7c 81       	ldd	r23, Y+4	; 0x04
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	9e 81       	ldd	r25, Y+6	; 0x06
     bb4:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	8b 87       	std	Y+11, r24	; 0x0b
     bcc:	0f c0       	rjmp	.+30     	; 0xbec <APP_u8GoToLine+0x1ca>
     bce:	88 ec       	ldi	r24, 0xC8	; 200
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9e 87       	std	Y+14, r25	; 0x0e
     bd4:	8d 87       	std	Y+13, r24	; 0x0d
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <APP_u8GoToLine+0x1b8>
     bde:	9e 87       	std	Y+14, r25	; 0x0e
     be0:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be2:	8b 85       	ldd	r24, Y+11	; 0x0b
     be4:	9c 85       	ldd	r25, Y+12	; 0x0c
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	9c 87       	std	Y+12, r25	; 0x0c
     bea:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bec:	8b 85       	ldd	r24, Y+11	; 0x0b
     bee:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf0:	89 2b       	or	r24, r25
     bf2:	69 f7       	brne	.-38     	; 0xbce <APP_u8GoToLine+0x1ac>
     bf4:	14 c0       	rjmp	.+40     	; 0xc1e <APP_u8GoToLine+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf6:	6f 81       	ldd	r22, Y+7	; 0x07
     bf8:	78 85       	ldd	r23, Y+8	; 0x08
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfe:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9c 87       	std	Y+12, r25	; 0x0c
     c08:	8b 87       	std	Y+11, r24	; 0x0b
     c0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c0e:	98 8b       	std	Y+16, r25	; 0x10
     c10:	8f 87       	std	Y+15, r24	; 0x0f
     c12:	8f 85       	ldd	r24, Y+15	; 0x0f
     c14:	98 89       	ldd	r25, Y+16	; 0x10
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <APP_u8GoToLine+0x1f4>
     c1a:	98 8b       	std	Y+16, r25	; 0x10
     c1c:	8f 87       	std	Y+15, r24	; 0x0f
{
	u8 Local_u8Counter;
	u8 Local_u8ErrorState = OK;
	if(Copy_u8LineNumber <= 3)
	{
		for(Local_u8Counter = 0; Local_u8Counter != Copy_u8LineNumber; Local_u8Counter++)
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	99 81       	ldd	r25, Y+1	; 0x01
     c26:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c28:	98 17       	cp	r25, r24
     c2a:	09 f0       	breq	.+2      	; 0xc2e <APP_u8GoToLine+0x20c>
     c2c:	0e cf       	rjmp	.-484    	; 0xa4a <APP_u8GoToLine+0x28>
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <APP_u8GoToLine+0x212>
			_delay_ms(3000);
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c36:	6f 96       	adiw	r28, 0x1f	; 31
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <DCM_voidRotateCw>:
}


#elif BUILD_CONFIG == POST_BUILD_CONFIG

void DCM_voidRotateCw(u8 Copy_u8DCM_PORT,u8 Copy_u8DCM_FirstPin,u8 Copy_u8DCM_SecondPin){
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <DCM_voidRotateCw+0x6>
     c4e:	1f 92       	push	r1
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	6a 83       	std	Y+2, r22	; 0x02
     c58:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8DCM_PORT,Copy_u8DCM_FirstPin,DIO_u8PIN_LOW);
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	6a 81       	ldd	r22, Y+2	; 0x02
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_u8DCM_PORT,Copy_u8DCM_SecondPin,DIO_u8PIN_HIGH);
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	6b 81       	ldd	r22, Y+3	; 0x03
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8SetPinValue>
}
     c6e:	00 00       	nop
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <DCM_voidRotateCcw>:

void DCM_voidRotateCcw(u8 Copy_u8DCM_PORT,u8 Copy_u8DCM_FirstPin,u8 Copy_u8DCM_SecondPin){
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	00 d0       	rcall	.+0      	; 0xc82 <DCM_voidRotateCcw+0x6>
     c82:	1f 92       	push	r1
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	6a 83       	std	Y+2, r22	; 0x02
     c8c:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8DCM_PORT,Copy_u8DCM_SecondPin,DIO_u8PIN_LOW);
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	6b 81       	ldd	r22, Y+3	; 0x03
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_u8DCM_PORT,Copy_u8DCM_FirstPin,DIO_u8PIN_HIGH);
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	6a 81       	ldd	r22, Y+2	; 0x02
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8SetPinValue>
}
     ca2:	00 00       	nop
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <DCM_voidStop>:

void DCM_voidStop(u8 Copy_u8DCM_PORT,u8 Copy_u8DCM_FirstPin,u8 Copy_u8DCM_SecondPin){
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <DCM_voidStop+0x6>
     cb6:	1f 92       	push	r1
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	6a 83       	std	Y+2, r22	; 0x02
     cc0:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8DCM_PORT,Copy_u8DCM_FirstPin,DIO_u8PIN_LOW);
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	6a 81       	ldd	r22, Y+2	; 0x02
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_u8DCM_PORT,Copy_u8DCM_SecondPin,DIO_u8PIN_LOW);
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	6b 81       	ldd	r22, Y+3	; 0x03
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_u8SetPinValue>
}
     cd6:	00 00       	nop
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <DIO_u8SetPinValue>:
    }
   	return Local_u8ErrorState;
}
 */
 
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	00 d0       	rcall	.+0      	; 0xcea <DIO_u8SetPinValue+0x6>
     cea:	00 d0       	rcall	.+0      	; 0xcec <DIO_u8SetPinValue+0x8>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	8a 83       	std	Y+2, r24	; 0x02
     cf2:	6b 83       	std	Y+3, r22	; 0x03
     cf4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
     cf6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	88 30       	cpi	r24, 0x08	; 8
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <DIO_u8SetPinValue+0x1c>
     cfe:	eb c0       	rjmp	.+470    	; 0xed6 <DIO_u8SetPinValue+0x1f2>
		if(Copy_u8Value == DIO_u8PIN_LOW)
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	88 23       	and	r24, r24
     d04:	09 f0       	breq	.+2      	; 0xd08 <DIO_u8SetPinValue+0x24>
     d06:	72 c0       	rjmp	.+228    	; 0xdec <DIO_u8SetPinValue+0x108>
		{
			switch(Copy_u8Port){
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	91 05       	cpc	r25, r1
     d12:	21 f1       	breq	.+72     	; 0xd5c <DIO_u8SetPinValue+0x78>
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	91 05       	cpc	r25, r1
     d18:	1c f4       	brge	.+6      	; 0xd20 <DIO_u8SetPinValue+0x3c>
     d1a:	89 2b       	or	r24, r25
     d1c:	41 f0       	breq	.+16     	; 0xd2e <DIO_u8SetPinValue+0x4a>
     d1e:	63 c0       	rjmp	.+198    	; 0xde6 <DIO_u8SetPinValue+0x102>
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	91 05       	cpc	r25, r1
     d24:	91 f1       	breq	.+100    	; 0xd8a <DIO_u8SetPinValue+0xa6>
     d26:	03 97       	sbiw	r24, 0x03	; 3
     d28:	09 f4       	brne	.+2      	; 0xd2c <DIO_u8SetPinValue+0x48>
     d2a:	46 c0       	rjmp	.+140    	; 0xdb8 <DIO_u8SetPinValue+0xd4>
     d2c:	5c c0       	rjmp	.+184    	; 0xde6 <DIO_u8SetPinValue+0x102>
			case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
     d2e:	8b e3       	ldi	r24, 0x3B	; 59
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	fc 01       	movw	r30, r24
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_u8SetPinValue+0x64>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	2a 95       	dec	r18
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_u8SetPinValue+0x60>
     d4c:	80 95       	com	r24
     d4e:	24 2f       	mov	r18, r20
     d50:	28 23       	and	r18, r24
     d52:	8b e3       	ldi	r24, 0x3B	; 59
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
     d5a:	bf c0       	rjmp	.+382    	; 0xeda <DIO_u8SetPinValue+0x1f6>
			case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
     d5c:	88 e3       	ldi	r24, 0x38	; 56
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	fc 01       	movw	r30, r24
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_u8SetPinValue+0x92>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	2a 95       	dec	r18
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_u8SetPinValue+0x8e>
     d7a:	80 95       	com	r24
     d7c:	24 2f       	mov	r18, r20
     d7e:	28 23       	and	r18, r24
     d80:	88 e3       	ldi	r24, 0x38	; 56
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
     d88:	a8 c0       	rjmp	.+336    	; 0xeda <DIO_u8SetPinValue+0x1f6>
			case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
     d8a:	85 e3       	ldi	r24, 0x35	; 53
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_u8SetPinValue+0xc0>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	2a 95       	dec	r18
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_u8SetPinValue+0xbc>
     da8:	80 95       	com	r24
     daa:	24 2f       	mov	r18, r20
     dac:	28 23       	and	r18, r24
     dae:	85 e3       	ldi	r24, 0x35	; 53
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
     db6:	91 c0       	rjmp	.+290    	; 0xeda <DIO_u8SetPinValue+0x1f6>
			case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
     db8:	82 e3       	ldi	r24, 0x32	; 50
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_u8SetPinValue+0xee>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	2a 95       	dec	r18
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_u8SetPinValue+0xea>
     dd6:	80 95       	com	r24
     dd8:	24 2f       	mov	r18, r20
     dda:	28 23       	and	r18, r24
     ddc:	82 e3       	ldi	r24, 0x32	; 50
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
     de4:	7a c0       	rjmp	.+244    	; 0xeda <DIO_u8SetPinValue+0x1f6>
			default : Local_u8ErrorState = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	77 c0       	rjmp	.+238    	; 0xeda <DIO_u8SetPinValue+0x1f6>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	09 f0       	breq	.+2      	; 0xdf4 <DIO_u8SetPinValue+0x110>
     df2:	6e c0       	rjmp	.+220    	; 0xed0 <DIO_u8SetPinValue+0x1ec>
		{
			switch(Copy_u8Port)
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	91 05       	cpc	r25, r1
     dfe:	19 f1       	breq	.+70     	; 0xe46 <DIO_u8SetPinValue+0x162>
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	91 05       	cpc	r25, r1
     e04:	1c f4       	brge	.+6      	; 0xe0c <DIO_u8SetPinValue+0x128>
     e06:	89 2b       	or	r24, r25
     e08:	41 f0       	breq	.+16     	; 0xe1a <DIO_u8SetPinValue+0x136>
     e0a:	5f c0       	rjmp	.+190    	; 0xeca <DIO_u8SetPinValue+0x1e6>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	91 05       	cpc	r25, r1
     e10:	81 f1       	breq	.+96     	; 0xe72 <DIO_u8SetPinValue+0x18e>
     e12:	03 97       	sbiw	r24, 0x03	; 3
     e14:	09 f4       	brne	.+2      	; 0xe18 <DIO_u8SetPinValue+0x134>
     e16:	43 c0       	rjmp	.+134    	; 0xe9e <DIO_u8SetPinValue+0x1ba>
     e18:	58 c0       	rjmp	.+176    	; 0xeca <DIO_u8SetPinValue+0x1e6>
			{
			case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
     e1a:	8b e3       	ldi	r24, 0x3B	; 59
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	fc 01       	movw	r30, r24
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_u8SetPinValue+0x150>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	2a 95       	dec	r18
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_u8SetPinValue+0x14c>
     e38:	24 2f       	mov	r18, r20
     e3a:	28 2b       	or	r18, r24
     e3c:	8b e3       	ldi	r24, 0x3B	; 59
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
     e44:	4a c0       	rjmp	.+148    	; 0xeda <DIO_u8SetPinValue+0x1f6>
			case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
     e46:	88 e3       	ldi	r24, 0x38	; 56
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	fc 01       	movw	r30, r24
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_u8SetPinValue+0x17c>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	2a 95       	dec	r18
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_u8SetPinValue+0x178>
     e64:	24 2f       	mov	r18, r20
     e66:	28 2b       	or	r18, r24
     e68:	88 e3       	ldi	r24, 0x38	; 56
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
     e70:	34 c0       	rjmp	.+104    	; 0xeda <DIO_u8SetPinValue+0x1f6>
			case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
     e72:	85 e3       	ldi	r24, 0x35	; 53
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_u8SetPinValue+0x1a8>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	2a 95       	dec	r18
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_u8SetPinValue+0x1a4>
     e90:	24 2f       	mov	r18, r20
     e92:	28 2b       	or	r18, r24
     e94:	85 e3       	ldi	r24, 0x35	; 53
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
     e9c:	1e c0       	rjmp	.+60     	; 0xeda <DIO_u8SetPinValue+0x1f6>
			case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
     e9e:	82 e3       	ldi	r24, 0x32	; 50
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_u8SetPinValue+0x1d4>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	2a 95       	dec	r18
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_u8SetPinValue+0x1d0>
     ebc:	24 2f       	mov	r18, r20
     ebe:	28 2b       	or	r18, r24
     ec0:	82 e3       	ldi	r24, 0x32	; 50
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <DIO_u8SetPinValue+0x1f6>
			default : Local_u8ErrorState = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	05 c0       	rjmp	.+10     	; 0xeda <DIO_u8SetPinValue+0x1f6>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_u8SetPinValue+0x1f6>
		}
	}
	else{
		Local_u8ErrorState = 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
}
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <DIO_u8SetPortValue+0x6>
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
     efa:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8Port)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	91 05       	cpc	r25, r1
     f06:	91 f0       	breq	.+36     	; 0xf2c <DIO_u8SetPortValue+0x42>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	91 05       	cpc	r25, r1
     f0c:	1c f4       	brge	.+6      	; 0xf14 <DIO_u8SetPortValue+0x2a>
     f0e:	89 2b       	or	r24, r25
     f10:	39 f0       	breq	.+14     	; 0xf20 <DIO_u8SetPortValue+0x36>
     f12:	1e c0       	rjmp	.+60     	; 0xf50 <DIO_u8SetPortValue+0x66>
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	91 05       	cpc	r25, r1
     f18:	79 f0       	breq	.+30     	; 0xf38 <DIO_u8SetPortValue+0x4e>
     f1a:	03 97       	sbiw	r24, 0x03	; 3
     f1c:	99 f0       	breq	.+38     	; 0xf44 <DIO_u8SetPortValue+0x5a>
     f1e:	18 c0       	rjmp	.+48     	; 0xf50 <DIO_u8SetPortValue+0x66>
    {
    case DIO_u8PORTA : PORTA = Copy_u8Value; break;
     f20:	8b e3       	ldi	r24, 0x3B	; 59
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	fc 01       	movw	r30, r24
     f28:	20 83       	st	Z, r18
     f2a:	14 c0       	rjmp	.+40     	; 0xf54 <DIO_u8SetPortValue+0x6a>
    case DIO_u8PORTB : PORTB = Copy_u8Value; break;
     f2c:	88 e3       	ldi	r24, 0x38	; 56
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	2b 81       	ldd	r18, Y+3	; 0x03
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
     f36:	0e c0       	rjmp	.+28     	; 0xf54 <DIO_u8SetPortValue+0x6a>
    case DIO_u8PORTC : PORTC = Copy_u8Value; break;
     f38:	85 e3       	ldi	r24, 0x35	; 53
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	2b 81       	ldd	r18, Y+3	; 0x03
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <DIO_u8SetPortValue+0x6a>
    case DIO_u8PORTD : PORTD = Copy_u8Value; break;
     f44:	82 e3       	ldi	r24, 0x32	; 50
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	2b 81       	ldd	r18, Y+3	; 0x03
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_u8SetPortValue+0x6a>
    default : Local_u8ErrorState = 1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 83       	std	Y+1, r24	; 0x01
    }
   	return Local_u8ErrorState;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value){
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	00 d0       	rcall	.+0      	; 0xf68 <DIO_u8GetPinValue+0x6>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <DIO_u8GetPinValue+0x8>
     f6a:	1f 92       	push	r1
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	8a 83       	std	Y+2, r24	; 0x02
     f72:	6b 83       	std	Y+3, r22	; 0x03
     f74:	5d 83       	std	Y+5, r21	; 0x05
     f76:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
     f78:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	89 2b       	or	r24, r25
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_u8GetPinValue+0x22>
     f82:	6f c0       	rjmp	.+222    	; 0x1062 <DIO_u8GetPinValue+0x100>
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	08 f0       	brcs	.+2      	; 0xf8c <DIO_u8GetPinValue+0x2a>
     f8a:	6b c0       	rjmp	.+214    	; 0x1062 <DIO_u8GetPinValue+0x100>
	{
		switch(Copy_u8Port)
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	11 f1       	breq	.+68     	; 0xfdc <DIO_u8GetPinValue+0x7a>
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	91 05       	cpc	r25, r1
     f9c:	1c f4       	brge	.+6      	; 0xfa4 <DIO_u8GetPinValue+0x42>
     f9e:	89 2b       	or	r24, r25
     fa0:	41 f0       	breq	.+16     	; 0xfb2 <DIO_u8GetPinValue+0x50>
     fa2:	5b c0       	rjmp	.+182    	; 0x105a <DIO_u8GetPinValue+0xf8>
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	91 05       	cpc	r25, r1
     fa8:	71 f1       	breq	.+92     	; 0x1006 <DIO_u8GetPinValue+0xa4>
     faa:	03 97       	sbiw	r24, 0x03	; 3
     fac:	09 f4       	brne	.+2      	; 0xfb0 <DIO_u8GetPinValue+0x4e>
     fae:	40 c0       	rjmp	.+128    	; 0x1030 <DIO_u8GetPinValue+0xce>
     fb0:	54 c0       	rjmp	.+168    	; 0x105a <DIO_u8GetPinValue+0xf8>
		{
		case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
     fb2:	89 e3       	ldi	r24, 0x39	; 57
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	fc 01       	movw	r30, r24
     fb8:	80 81       	ld	r24, Z
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	2b 81       	ldd	r18, Y+3	; 0x03
     fc0:	22 2f       	mov	r18, r18
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_u8GetPinValue+0x68>
     fc6:	95 95       	asr	r25
     fc8:	87 95       	ror	r24
     fca:	2a 95       	dec	r18
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_u8GetPinValue+0x64>
     fce:	28 2f       	mov	r18, r24
     fd0:	21 70       	andi	r18, 0x01	; 1
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
     fda:	42 c0       	rjmp	.+132    	; 0x1060 <DIO_u8GetPinValue+0xfe>
		case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
     fdc:	86 e3       	ldi	r24, 0x36	; 54
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	2b 81       	ldd	r18, Y+3	; 0x03
     fea:	22 2f       	mov	r18, r18
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_u8GetPinValue+0x92>
     ff0:	95 95       	asr	r25
     ff2:	87 95       	ror	r24
     ff4:	2a 95       	dec	r18
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_u8GetPinValue+0x8e>
     ff8:	28 2f       	mov	r18, r24
     ffa:	21 70       	andi	r18, 0x01	; 1
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
    1004:	2d c0       	rjmp	.+90     	; 0x1060 <DIO_u8GetPinValue+0xfe>
		case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    1006:	83 e3       	ldi	r24, 0x33	; 51
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	2b 81       	ldd	r18, Y+3	; 0x03
    1014:	22 2f       	mov	r18, r18
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_u8GetPinValue+0xbc>
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	2a 95       	dec	r18
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_u8GetPinValue+0xb8>
    1022:	28 2f       	mov	r18, r24
    1024:	21 70       	andi	r18, 0x01	; 1
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	fc 01       	movw	r30, r24
    102c:	20 83       	st	Z, r18
    102e:	18 c0       	rjmp	.+48     	; 0x1060 <DIO_u8GetPinValue+0xfe>
		case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    1030:	80 e3       	ldi	r24, 0x30	; 48
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	fc 01       	movw	r30, r24
    1036:	80 81       	ld	r24, Z
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	2b 81       	ldd	r18, Y+3	; 0x03
    103e:	22 2f       	mov	r18, r18
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_u8GetPinValue+0xe6>
    1044:	95 95       	asr	r25
    1046:	87 95       	ror	r24
    1048:	2a 95       	dec	r18
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_u8GetPinValue+0xe2>
    104c:	28 2f       	mov	r18, r24
    104e:	21 70       	andi	r18, 0x01	; 1
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <DIO_u8GetPinValue+0xfe>
		default : Local_u8ErrorState = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <DIO_u8GetPinValue+0x104>
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_u8GetPinValue+0x104>
	else
	{
		Local_u8ErrorState = 1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <IR_u8GetStatus>:
#include "IR_interface.h"
#include "IR_config.h"
#include "IR_private.h"


u8 IR_u8GetStatus(u8 Copy_u8IR_Port, u8 Copy_u8IR_Pin, u8* Copy_u8StatusValue){
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	00 d0       	rcall	.+0      	; 0x107e <IR_u8GetStatus+0x6>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <IR_u8GetStatus+0x8>
    1080:	1f 92       	push	r1
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	8a 83       	std	Y+2, r24	; 0x02
    1088:	6b 83       	std	Y+3, r22	; 0x03
    108a:	5d 83       	std	Y+5, r21	; 0x05
    108c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;
	Local_u8ErrorState = DIO_u8GetPinValue(Copy_u8IR_Port, Copy_u8IR_Pin, Copy_u8StatusValue);
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	ac 01       	movw	r20, r24
    1094:	6b 81       	ldd	r22, Y+3	; 0x03
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8GetPinValue>
    109c:	89 83       	std	Y+1, r24	; 0x01
	if(*Copy_u8StatusValue == DIO_u8PIN_LOW)
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	88 23       	and	r24, r24
    10a8:	31 f4       	brne	.+12     	; 0x10b6 <IR_u8GetStatus+0x3e>
		*Copy_u8StatusValue = IR_OBJ_DETECTED;     /*No black line*/
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	22 e0       	ldi	r18, 0x02	; 2
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 83       	st	Z, r18
    10b4:	0b c0       	rjmp	.+22     	; 0x10cc <IR_u8GetStatus+0x54>
	else if (*Copy_u8StatusValue == DIO_u8PIN_HIGH)
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	fc 01       	movw	r30, r24
    10bc:	80 81       	ld	r24, Z
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	29 f4       	brne	.+10     	; 0x10cc <IR_u8GetStatus+0x54>
		*Copy_u8StatusValue = IR_OBJ_NOT_DETECTED; /*There is a black line*/
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	23 e0       	ldi	r18, 0x03	; 3
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
	return Local_u8ErrorState;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"


void PORT_voidInit(void){
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    10e6:	8a e3       	ldi	r24, 0x3A	; 58
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	2f e0       	ldi	r18, 0x0F	; 15
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
	DDRB = PORTB_DIR;
    10f0:	87 e3       	ldi	r24, 0x37	; 55
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	28 e0       	ldi	r18, 0x08	; 8
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
	DDRC = PORTC_DIR;
    10fa:	84 e3       	ldi	r24, 0x34	; 52
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	fc 01       	movw	r30, r24
    1100:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    1102:	81 e3       	ldi	r24, 0x31	; 49
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	20 e8       	ldi	r18, 0x80	; 128
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
	
	PORTA = PORTA_INITIAL_VALUE;
    110c:	8b e3       	ldi	r24, 0x3B	; 59
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	fc 01       	movw	r30, r24
    1112:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    1114:	88 e3       	ldi	r24, 0x38	; 56
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	fc 01       	movw	r30, r24
    111a:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    111c:	85 e3       	ldi	r24, 0x35	; 53
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    1124:	82 e3       	ldi	r24, 0x32	; 50
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	fc 01       	movw	r30, r24
    112a:	10 82       	st	Z, r1
}
    112c:	00 00       	nop
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <TIMER0_voidInit>:
#include "TIMER0_config.h"

static void (*TIMER0_pvCallBackFuncCompMatch)(void) = NULL;
static void (*TIMER0_pvCallBackFuncOverflow)(void) = NULL;

void TIMER0_voidInit(void){
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);


#elif TIMER0_WAVE_GEN_MODE == TIMER0_PWM_PHASE_CORRECT
	SET_BIT(TCCR0,TCCR0_WGM00);
    113c:	83 e5       	ldi	r24, 0x53	; 83
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	fc 01       	movw	r30, r24
    1142:	20 81       	ld	r18, Z
    1144:	83 e5       	ldi	r24, 0x53	; 83
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	20 64       	ori	r18, 0x40	; 64
    114a:	fc 01       	movw	r30, r24
    114c:	20 83       	st	Z, r18
	CLR_BIT(TCCR0,TCCR0_WGM01);
    114e:	83 e5       	ldi	r24, 0x53	; 83
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	fc 01       	movw	r30, r24
    1154:	20 81       	ld	r18, Z
    1156:	83 e5       	ldi	r24, 0x53	; 83
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	27 7f       	andi	r18, 0xF7	; 247
    115c:	fc 01       	movw	r30, r24
    115e:	20 83       	st	Z, r18
#else
#error "Wrong TIMER0_WAVE_GEN_MODE configuration option"
#endif

	/*Setting an initial value for the Output compare register*/
	OCR0 = TIMER0_INIT_COMP_VALUE;
    1160:	8c e5       	ldi	r24, 0x5C	; 92
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	29 e6       	ldi	r18, 0x69	; 105
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18

	/*Setting the OC0 Mode*/
	TCCR0 &= TIMER0_COMP_MATCH_OUTPUT_MASK;
    116a:	83 e5       	ldi	r24, 0x53	; 83
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	fc 01       	movw	r30, r24
    1170:	20 81       	ld	r18, Z
    1172:	83 e5       	ldi	r24, 0x53	; 83
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	2f 7c       	andi	r18, 0xCF	; 207
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18
	TCCR0 |= TIMER0_OC0_MODE;
    117c:	83 e5       	ldi	r24, 0x53	; 83
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	fc 01       	movw	r30, r24
    1182:	20 81       	ld	r18, Z
    1184:	83 e5       	ldi	r24, 0x53	; 83
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	20 62       	ori	r18, 0x20	; 32
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18

	/*Prescaler Selection*/
	TCCR0 &= TIMER0_PRES_MASK;
    118e:	83 e5       	ldi	r24, 0x53	; 83
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	20 81       	ld	r18, Z
    1196:	83 e5       	ldi	r24, 0x53	; 83
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	28 7f       	andi	r18, 0xF8	; 248
    119c:	fc 01       	movw	r30, r24
    119e:	20 83       	st	Z, r18
	TCCR0 |= TIMER0_PRES_CLK;
    11a0:	83 e5       	ldi	r24, 0x53	; 83
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 81       	ld	r18, Z
    11a8:	83 e5       	ldi	r24, 0x53	; 83
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	22 60       	ori	r18, 0x02	; 2
    11ae:	fc 01       	movw	r30, r24
    11b0:	20 83       	st	Z, r18

	/*Setting an initial value for the Timer Register to start counting from*/
	TCNT0 = TIMER0_INIT_VALUE;
    11b2:	82 e5       	ldi	r24, 0x52	; 82
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	fc 01       	movw	r30, r24
    11b8:	10 82       	st	Z, r1

	/*Setting initial status for timer interrupts*/
#if TIMER0_INIT_OVERFLOW_INT_STATE == TIMER0_INT_ENABLED
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TIMER0_INIT_OVERFLOW_INT_STATE == TIMER0_INT_DISABLED
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    11ba:	89 e5       	ldi	r24, 0x59	; 89
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	fc 01       	movw	r30, r24
    11c0:	20 81       	ld	r18, Z
    11c2:	89 e5       	ldi	r24, 0x59	; 89
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	2e 7f       	andi	r18, 0xFE	; 254
    11c8:	fc 01       	movw	r30, r24
    11ca:	20 83       	st	Z, r18
#endif

#if   TIMER0_INTIT_COMP_MATCH_INT_STATE == TIMER0_INT_ENABLED
	SET_BIT(TIMSK,TIMSK_OCIE0);
#elif TIMER0_INTIT_COMP_MATCH_INT_STATE == TIMER0_INT_DISABLED
	CLR_BIT(TIMSK,TIMSK_OCIE0);
    11cc:	89 e5       	ldi	r24, 0x59	; 89
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 81       	ld	r18, Z
    11d4:	89 e5       	ldi	r24, 0x59	; 89
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	2d 7f       	andi	r18, 0xFD	; 253
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
#else
#error "Wrong TIMER0_INTIT_COMP_MATCH_INT_STATE configuration option"
#endif
}
    11de:	00 00       	nop
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <TIMER0_u8SetPrescaler>:


u8 TIMER0_u8SetPrescaler(u8 Copy_u8PrescalerOption){
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <TIMER0_u8SetPrescaler+0x6>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    11f2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PrescalerOption<=TIMER0_EXTERNAL_CLK_T0_ON_RISING_EDGE)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	a0 f4       	brcc	.+40     	; 0x1222 <TIMER0_u8SetPrescaler+0x3c>
	{
		TCCR0 &= TIMER0_PRES_MASK;
    11fa:	83 e5       	ldi	r24, 0x53	; 83
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	fc 01       	movw	r30, r24
    1200:	20 81       	ld	r18, Z
    1202:	83 e5       	ldi	r24, 0x53	; 83
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	28 7f       	andi	r18, 0xF8	; 248
    1208:	fc 01       	movw	r30, r24
    120a:	20 83       	st	Z, r18
		TCCR0 |= Copy_u8PrescalerOption;
    120c:	83 e5       	ldi	r24, 0x53	; 83
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	fc 01       	movw	r30, r24
    1212:	30 81       	ld	r19, Z
    1214:	83 e5       	ldi	r24, 0x53	; 83
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	2a 81       	ldd	r18, Y+2	; 0x02
    121a:	23 2b       	or	r18, r19
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <TIMER0_u8SetPrescaler+0x40>
	}
	else
	{
		Local_u8ErrorStatus = NOK;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <TIMER0_voidStopTimer0>:


void TIMER0_voidStopTimer0(void){
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_PRES_MASK;
    123a:	83 e5       	ldi	r24, 0x53	; 83
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	fc 01       	movw	r30, r24
    1240:	20 81       	ld	r18, Z
    1242:	83 e5       	ldi	r24, 0x53	; 83
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	28 7f       	andi	r18, 0xF8	; 248
    1248:	fc 01       	movw	r30, r24
    124a:	20 83       	st	Z, r18
	TCCR0 |= TIMER0_PRES_STOPPED;
    124c:	23 e5       	ldi	r18, 0x53	; 83
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	83 e5       	ldi	r24, 0x53	; 83
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	f9 01       	movw	r30, r18
    1256:	20 81       	ld	r18, Z
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
}
    125c:	00 00       	nop
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <TIMER0_voidSetCompareValue>:


void TIMER0_voidSetCompareValue(u8 Copy_u8CompareValue){
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	1f 92       	push	r1
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompareValue;
    1270:	8c e5       	ldi	r24, 0x5C	; 92
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	29 81       	ldd	r18, Y+1	; 0x01
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
}
    127a:	00 00       	nop
    127c:	0f 90       	pop	r0
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <TIMER0_u8SetPwmDutyCycle>:


u8 TIMER0_u8SetPwmDutyCycle(u8 Copy_u32DutyCycle,u8 Copy_u8Timer0WaveMode,u8 Copy_u8PwmType){
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	00 d0       	rcall	.+0      	; 0x128e <TIMER0_u8SetPwmDutyCycle+0xa>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <TIMER0_u8SetPwmDutyCycle+0xc>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	6b 83       	std	Y+3, r22	; 0x03
    1298:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = OK;
    129a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u32DutyCycle<=100)
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	85 36       	cpi	r24, 0x65	; 101
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <TIMER0_u8SetPwmDutyCycle+0x20>
    12a2:	b8 c0       	rjmp	.+368    	; 0x1414 <TIMER0_u8SetPwmDutyCycle+0x190>
	{
		if(Copy_u8Timer0WaveMode == TIMER0_PWM_PHASE_CORRECT)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	99 f4       	brne	.+38     	; 0x12d0 <TIMER0_u8SetPwmDutyCycle+0x4c>
		{
			/*Setting the mode to Phase Correct PWM*/
			SET_BIT(TCCR0,TCCR0_WGM00);
    12aa:	83 e5       	ldi	r24, 0x53	; 83
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 81       	ld	r18, Z
    12b2:	83 e5       	ldi	r24, 0x53	; 83
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	20 64       	ori	r18, 0x40	; 64
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
			CLR_BIT(TCCR0,TCCR0_WGM01);
    12bc:	83 e5       	ldi	r24, 0x53	; 83
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 81       	ld	r18, Z
    12c4:	83 e5       	ldi	r24, 0x53	; 83
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	27 7f       	andi	r18, 0xF7	; 247
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    12ce:	18 c0       	rjmp	.+48     	; 0x1300 <TIMER0_u8SetPwmDutyCycle+0x7c>
		}
		else if(Copy_u8Timer0WaveMode == TIMER0_FAST_PWM)
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	84 30       	cpi	r24, 0x04	; 4
    12d4:	99 f4       	brne	.+38     	; 0x12fc <TIMER0_u8SetPwmDutyCycle+0x78>
		{
			/*Setting the mode to Fast PWM*/
			SET_BIT(TCCR0,TCCR0_WGM00);
    12d6:	83 e5       	ldi	r24, 0x53	; 83
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	fc 01       	movw	r30, r24
    12dc:	20 81       	ld	r18, Z
    12de:	83 e5       	ldi	r24, 0x53	; 83
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	20 64       	ori	r18, 0x40	; 64
    12e4:	fc 01       	movw	r30, r24
    12e6:	20 83       	st	Z, r18
			SET_BIT(TCCR0,TCCR0_WGM01);
    12e8:	83 e5       	ldi	r24, 0x53	; 83
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 81       	ld	r18, Z
    12f0:	83 e5       	ldi	r24, 0x53	; 83
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	28 60       	ori	r18, 0x08	; 8
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <TIMER0_u8SetPwmDutyCycle+0x7c>
		}
		else
		{
			Local_u8ErrorStatus = NOK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
		}

		switch(Copy_u8PwmType)
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	85 30       	cpi	r24, 0x05	; 5
    1308:	91 05       	cpc	r25, r1
    130a:	21 f0       	breq	.+8      	; 0x1314 <TIMER0_u8SetPwmDutyCycle+0x90>
    130c:	06 97       	sbiw	r24, 0x06	; 6
    130e:	09 f4       	brne	.+2      	; 0x1312 <TIMER0_u8SetPwmDutyCycle+0x8e>
    1310:	44 c0       	rjmp	.+136    	; 0x139a <TIMER0_u8SetPwmDutyCycle+0x116>
    1312:	7c c0       	rjmp	.+248    	; 0x140c <TIMER0_u8SetPwmDutyCycle+0x188>
		{
		case TIMER0_PWM_INVERTING:
			TCCR0 &= TIMER0_COMP_MATCH_OUTPUT_MASK;
    1314:	83 e5       	ldi	r24, 0x53	; 83
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	fc 01       	movw	r30, r24
    131a:	20 81       	ld	r18, Z
    131c:	83 e5       	ldi	r24, 0x53	; 83
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	2f 7c       	andi	r18, 0xCF	; 207
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18
			TCCR0 |= TIMER0_OC0_SET_ON_COMP_OR_INVERTING_MODE;
    1326:	83 e5       	ldi	r24, 0x53	; 83
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	fc 01       	movw	r30, r24
    132c:	20 81       	ld	r18, Z
    132e:	83 e5       	ldi	r24, 0x53	; 83
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	20 63       	ori	r18, 0x30	; 48
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
			OCR0 = TIMER0_MAX_VAL - ((u16)((u16)Copy_u32DutyCycle * (u16)TIMER0_MAX_VAL)/100.0);
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4f ef       	ldi	r20, 0xFF	; 255
    1340:	42 9f       	mul	r20, r18
    1342:	c0 01       	movw	r24, r0
    1344:	43 9f       	mul	r20, r19
    1346:	90 0d       	add	r25, r0
    1348:	11 24       	eor	r1, r1
    134a:	cc 01       	movw	r24, r24
    134c:	a0 e0       	ldi	r26, 0x00	; 0
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	48 ec       	ldi	r20, 0xC8	; 200
    1362:	52 e4       	ldi	r21, 0x42	; 66
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__divsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	9c 01       	movw	r18, r24
    1372:	ad 01       	movw	r20, r26
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	8f e7       	ldi	r24, 0x7F	; 127
    137a:	93 e4       	ldi	r25, 0x43	; 67
    137c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__subsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	0c e5       	ldi	r16, 0x5C	; 92
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	f8 01       	movw	r30, r16
    1396:	80 83       	st	Z, r24
			break;
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <TIMER0_u8SetPwmDutyCycle+0x194>
		case TIMER0_PWM_NON_INVERTING:
			TCCR0 &= TIMER0_COMP_MATCH_OUTPUT_MASK;
    139a:	83 e5       	ldi	r24, 0x53	; 83
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	fc 01       	movw	r30, r24
    13a0:	20 81       	ld	r18, Z
    13a2:	83 e5       	ldi	r24, 0x53	; 83
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	2f 7c       	andi	r18, 0xCF	; 207
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18
			TCCR0 |= TIMER0_OC0_CLR_ON_COMP_OR_NON_INVERTING_MODE;
    13ac:	83 e5       	ldi	r24, 0x53	; 83
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 81       	ld	r18, Z
    13b4:	83 e5       	ldi	r24, 0x53	; 83
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	20 62       	ori	r18, 0x20	; 32
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18
			OCR0 = ((u16)((u16)Copy_u32DutyCycle * (u16)TIMER0_MAX_VAL)/100.0);
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4f ef       	ldi	r20, 0xFF	; 255
    13c6:	42 9f       	mul	r20, r18
    13c8:	c0 01       	movw	r24, r0
    13ca:	43 9f       	mul	r20, r19
    13cc:	90 0d       	add	r25, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	cc 01       	movw	r24, r24
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	48 ec       	ldi	r20, 0xC8	; 200
    13e8:	52 e4       	ldi	r21, 0x42	; 66
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__divsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	0c e5       	ldi	r16, 0x5C	; 92
    13f8:	10 e0       	ldi	r17, 0x00	; 0
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	f8 01       	movw	r30, r16
    1408:	80 83       	st	Z, r24
			break;
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <TIMER0_u8SetPwmDutyCycle+0x194>
		default:
			Local_u8ErrorStatus = NOK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
			break;
    1410:	00 00       	nop
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <TIMER0_u8SetPwmDutyCycle+0x194>
		}
	}
	else
	{
		Local_u8ErrorStatus = NOK;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	08 95       	ret

0000142c <TIMER0_u8IntEnable>:



/*Interrupts and SetCallBack functions: */

u8 TIMER0_u8IntEnable(u8 Copy_u8InterruptType){
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <TIMER0_u8IntEnable+0x6>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    1438:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8InterruptType)
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	8a 30       	cpi	r24, 0x0A	; 10
    1442:	91 05       	cpc	r25, r1
    1444:	19 f0       	breq	.+6      	; 0x144c <TIMER0_u8IntEnable+0x20>
    1446:	0b 97       	sbiw	r24, 0x0b	; 11
    1448:	59 f0       	breq	.+22     	; 0x1460 <TIMER0_u8IntEnable+0x34>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <TIMER0_u8IntEnable+0x48>
	{
	case TIMER0_OVERFLOW_INT:
		SET_BIT(TIMSK,TIMSK_TOIE0);
    144c:	89 e5       	ldi	r24, 0x59	; 89
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	fc 01       	movw	r30, r24
    1452:	20 81       	ld	r18, Z
    1454:	89 e5       	ldi	r24, 0x59	; 89
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	21 60       	ori	r18, 0x01	; 1
    145a:	fc 01       	movw	r30, r24
    145c:	20 83       	st	Z, r18
		break;
    145e:	0d c0       	rjmp	.+26     	; 0x147a <TIMER0_u8IntEnable+0x4e>
	case TIMER0_COMP_MATCH_INT:
		SET_BIT(TIMSK,TIMSK_OCIE0);
    1460:	89 e5       	ldi	r24, 0x59	; 89
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	fc 01       	movw	r30, r24
    1466:	20 81       	ld	r18, Z
    1468:	89 e5       	ldi	r24, 0x59	; 89
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	22 60       	ori	r18, 0x02	; 2
    146e:	fc 01       	movw	r30, r24
    1470:	20 83       	st	Z, r18
		break;
    1472:	03 c0       	rjmp	.+6      	; 0x147a <TIMER0_u8IntEnable+0x4e>
	default:
		Local_u8ErrorStatus = NOK;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
		break;
    1478:	00 00       	nop
	}
	return Local_u8ErrorStatus;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <TIMER0_u8IntDisable>:


u8 TIMER0_u8IntDisable(u8 Copy_u8InterruptType){
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	00 d0       	rcall	.+0      	; 0x148c <TIMER0_u8IntDisable+0x6>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    1492:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8InterruptType)
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	8a 30       	cpi	r24, 0x0A	; 10
    149c:	91 05       	cpc	r25, r1
    149e:	19 f0       	breq	.+6      	; 0x14a6 <TIMER0_u8IntDisable+0x20>
    14a0:	0b 97       	sbiw	r24, 0x0b	; 11
    14a2:	59 f0       	breq	.+22     	; 0x14ba <TIMER0_u8IntDisable+0x34>
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <TIMER0_u8IntDisable+0x48>
	{
	case TIMER0_OVERFLOW_INT:
		CLR_BIT(TIMSK,TIMSK_TOIE0);
    14a6:	89 e5       	ldi	r24, 0x59	; 89
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 81       	ld	r18, Z
    14ae:	89 e5       	ldi	r24, 0x59	; 89
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	2e 7f       	andi	r18, 0xFE	; 254
    14b4:	fc 01       	movw	r30, r24
    14b6:	20 83       	st	Z, r18
		break;
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <TIMER0_u8IntDisable+0x4e>
	case TIMER0_COMP_MATCH_INT:
		CLR_BIT(TIMSK,TIMSK_OCIE0);
    14ba:	89 e5       	ldi	r24, 0x59	; 89
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	fc 01       	movw	r30, r24
    14c0:	20 81       	ld	r18, Z
    14c2:	89 e5       	ldi	r24, 0x59	; 89
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	2d 7f       	andi	r18, 0xFD	; 253
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
		break;
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <TIMER0_u8IntDisable+0x4e>
	default:
		Local_u8ErrorStatus = NOK;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
		break;
    14d2:	00 00       	nop
	}
	return Local_u8ErrorStatus;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <TIMER0_u8SetCallBackCompMatch>:


u8 TIMER0_u8SetCallBackCompMatch(void (*Copy_pvCallBackFunc)(void)){
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <TIMER0_u8SetCallBackCompMatch+0x6>
    14e6:	1f 92       	push	r1
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	9b 83       	std	Y+3, r25	; 0x03
    14ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    14f0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	89 2b       	or	r24, r25
    14f8:	39 f0       	breq	.+14     	; 0x1508 <TIMER0_u8SetCallBackCompMatch+0x28>
	{
		TIMER0_pvCallBackFuncCompMatch = Copy_pvCallBackFunc;
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <TIMER0_pvCallBackFuncCompMatch+0x1>
    1502:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TIMER0_pvCallBackFuncCompMatch>
    1506:	02 c0       	rjmp	.+4      	; 0x150c <TIMER0_u8SetCallBackCompMatch+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    150c:	89 81       	ldd	r24, Y+1	; 0x01
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <TIMER0_u8SetCallBackOverflow>:


u8 TIMER0_u8SetCallBackOverflow(void (*Copy_pvCallBackFunc)(void)){
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	00 d0       	rcall	.+0      	; 0x1520 <TIMER0_u8SetCallBackOverflow+0x6>
    1520:	1f 92       	push	r1
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	9b 83       	std	Y+3, r25	; 0x03
    1528:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    152a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	89 2b       	or	r24, r25
    1532:	39 f0       	breq	.+14     	; 0x1542 <TIMER0_u8SetCallBackOverflow+0x28>
	{
		TIMER0_pvCallBackFuncOverflow = Copy_pvCallBackFunc;
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <TIMER0_pvCallBackFuncOverflow+0x1>
    153c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <TIMER0_pvCallBackFuncOverflow>
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <TIMER0_u8SetCallBackOverflow+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <__vector_10>:


/*CompMatch ISR*/
void __vector_10 (void)  __attribute__ ((signal));
void __vector_10 (void){
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFuncCompMatch != NULL)
    157e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TIMER0_pvCallBackFuncCompMatch>
    1582:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <TIMER0_pvCallBackFuncCompMatch+0x1>
    1586:	89 2b       	or	r24, r25
    1588:	31 f0       	breq	.+12     	; 0x1596 <__vector_10+0x42>
	{
		TIMER0_pvCallBackFuncCompMatch();
    158a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TIMER0_pvCallBackFuncCompMatch>
    158e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <TIMER0_pvCallBackFuncCompMatch+0x1>
    1592:	fc 01       	movw	r30, r24
    1594:	09 95       	icall
	}
}
    1596:	00 00       	nop
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_11>:

/*Overflow ISR*/
void __vector_11 (void)  __attribute__ ((signal));
void __vector_11 (void){
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFuncOverflow != NULL)
    15e8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <TIMER0_pvCallBackFuncOverflow>
    15ec:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <TIMER0_pvCallBackFuncOverflow+0x1>
    15f0:	89 2b       	or	r24, r25
    15f2:	31 f0       	breq	.+12     	; 0x1600 <__vector_11+0x42>
	{
		TIMER0_pvCallBackFuncOverflow();
    15f4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <TIMER0_pvCallBackFuncOverflow>
    15f8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <TIMER0_pvCallBackFuncOverflow+0x1>
    15fc:	fc 01       	movw	r30, r24
    15fe:	09 95       	icall
	}
}
    1600:	00 00       	nop
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	bf 91       	pop	r27
    160c:	af 91       	pop	r26
    160e:	9f 91       	pop	r25
    1610:	8f 91       	pop	r24
    1612:	7f 91       	pop	r23
    1614:	6f 91       	pop	r22
    1616:	5f 91       	pop	r21
    1618:	4f 91       	pop	r20
    161a:	3f 91       	pop	r19
    161c:	2f 91       	pop	r18
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <TIMER2_voidInit>:
static void (*TIMER2_pvCallBackFuncCompMatch)(void) = NULL;
static void (*TIMER2_pvCallBackFuncOverflow)(void) = NULL;


void TIMER2_voidInit(void)
{
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
#else
#error "Wrong TIMER2_INIT_OVERFLOW_INT_STATE  configuration option "
#endif

#elif TIMER2_WAVE_GEN_MODE == TIMER2_PWM_PHASE_CORRECT
	SET_BIT(TCCR2, TCCR2_WGM20);
    1630:	85 e4       	ldi	r24, 0x45	; 69
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	fc 01       	movw	r30, r24
    1636:	20 81       	ld	r18, Z
    1638:	85 e4       	ldi	r24, 0x45	; 69
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	20 64       	ori	r18, 0x40	; 64
    163e:	fc 01       	movw	r30, r24
    1640:	20 83       	st	Z, r18
	CLR_BIT(TCCR2, TCCR2_WGM21);
    1642:	85 e4       	ldi	r24, 0x45	; 69
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	fc 01       	movw	r30, r24
    1648:	20 81       	ld	r18, Z
    164a:	85 e4       	ldi	r24, 0x45	; 69
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	27 7f       	andi	r18, 0xF7	; 247
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18
#error "Wrong TIMER2_WAVE_GEN_MODE configuration option"
#endif


	/*Setting an initial value for the Output compare register*/
	OCR2 = TIMER2_INIT_COMP_VALUE;
    1654:	83 e4       	ldi	r24, 0x43	; 67
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	29 e6       	ldi	r18, 0x69	; 105
    165a:	fc 01       	movw	r30, r24
    165c:	20 83       	st	Z, r18

	/*Setting the OC2 Mode*/
	TCCR2 &= TIMER2_COMP_MATCH_OUTPUT_MASK;
    165e:	85 e4       	ldi	r24, 0x45	; 69
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	fc 01       	movw	r30, r24
    1664:	20 81       	ld	r18, Z
    1666:	85 e4       	ldi	r24, 0x45	; 69
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	2f 7c       	andi	r18, 0xCF	; 207
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18
	TCCR2 |= TIMER2_OC2_MODE;
    1670:	85 e4       	ldi	r24, 0x45	; 69
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	fc 01       	movw	r30, r24
    1676:	20 81       	ld	r18, Z
    1678:	85 e4       	ldi	r24, 0x45	; 69
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	20 62       	ori	r18, 0x20	; 32
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18

	/*Prescaler Selection*/
	TCCR2 &= TIMER2_PRES_MASK;
    1682:	85 e4       	ldi	r24, 0x45	; 69
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	fc 01       	movw	r30, r24
    1688:	20 81       	ld	r18, Z
    168a:	85 e4       	ldi	r24, 0x45	; 69
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	28 7f       	andi	r18, 0xF8	; 248
    1690:	fc 01       	movw	r30, r24
    1692:	20 83       	st	Z, r18
	TCCR2 |= TIMER2_PRES_CLK;
    1694:	85 e4       	ldi	r24, 0x45	; 69
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	fc 01       	movw	r30, r24
    169a:	20 81       	ld	r18, Z
    169c:	85 e4       	ldi	r24, 0x45	; 69
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	22 60       	ori	r18, 0x02	; 2
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18

	/*Setting an initial value for the Timer Register to start counting from*/
	TCNT2 = TIMER2_INIT_VALUE;
    16a6:	84 e4       	ldi	r24, 0x44	; 68
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	fc 01       	movw	r30, r24
    16ac:	10 82       	st	Z, r1
}
    16ae:	00 00       	nop
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <TIMER2_u8SetPwmDutyCycle>:



u8 TIMER2_u8SetPwmDutyCycle(u8 Copy_u32DutyCycle, u8 Copy_u8Timer0WaveMode, u8 Copy_u8PwmType)
{
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <TIMER2_u8SetPwmDutyCycle+0xa>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <TIMER2_u8SetPwmDutyCycle+0xc>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	8a 83       	std	Y+2, r24	; 0x02
    16c8:	6b 83       	std	Y+3, r22	; 0x03
    16ca:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = OK;
    16cc:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u32DutyCycle <= 100)
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	85 36       	cpi	r24, 0x65	; 101
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <TIMER2_u8SetPwmDutyCycle+0x20>
    16d4:	b8 c0       	rjmp	.+368    	; 0x1846 <TIMER2_u8SetPwmDutyCycle+0x190>
	{
		if (Copy_u8Timer0WaveMode == TIMER2_PWM_PHASE_CORRECT)
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	99 f4       	brne	.+38     	; 0x1702 <TIMER2_u8SetPwmDutyCycle+0x4c>
		{
			/*Setting the mode to Phase Correct PWM*/
			SET_BIT(TCCR2, TCCR2_WGM20);
    16dc:	85 e4       	ldi	r24, 0x45	; 69
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	fc 01       	movw	r30, r24
    16e2:	20 81       	ld	r18, Z
    16e4:	85 e4       	ldi	r24, 0x45	; 69
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	20 64       	ori	r18, 0x40	; 64
    16ea:	fc 01       	movw	r30, r24
    16ec:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, TCCR2_WGM21);
    16ee:	85 e4       	ldi	r24, 0x45	; 69
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	fc 01       	movw	r30, r24
    16f4:	20 81       	ld	r18, Z
    16f6:	85 e4       	ldi	r24, 0x45	; 69
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	27 7f       	andi	r18, 0xF7	; 247
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
    1700:	18 c0       	rjmp	.+48     	; 0x1732 <TIMER2_u8SetPwmDutyCycle+0x7c>
		}
		else if (Copy_u8Timer0WaveMode == TIMER2_FAST_PWM)
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	99 f4       	brne	.+38     	; 0x172e <TIMER2_u8SetPwmDutyCycle+0x78>
		{
			/*Setting the mode to Fast PWM*/
			SET_BIT(TCCR2, TCCR2_WGM20);
    1708:	85 e4       	ldi	r24, 0x45	; 69
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	fc 01       	movw	r30, r24
    170e:	20 81       	ld	r18, Z
    1710:	85 e4       	ldi	r24, 0x45	; 69
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	20 64       	ori	r18, 0x40	; 64
    1716:	fc 01       	movw	r30, r24
    1718:	20 83       	st	Z, r18
			SET_BIT(TCCR2, TCCR2_WGM21);
    171a:	85 e4       	ldi	r24, 0x45	; 69
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	fc 01       	movw	r30, r24
    1720:	20 81       	ld	r18, Z
    1722:	85 e4       	ldi	r24, 0x45	; 69
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	28 60       	ori	r18, 0x08	; 8
    1728:	fc 01       	movw	r30, r24
    172a:	20 83       	st	Z, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <TIMER2_u8SetPwmDutyCycle+0x7c>
		}
		else
		{
			Local_u8ErrorStatus = NOK;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
		}

		switch (Copy_u8PwmType)
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	85 30       	cpi	r24, 0x05	; 5
    173a:	91 05       	cpc	r25, r1
    173c:	21 f0       	breq	.+8      	; 0x1746 <TIMER2_u8SetPwmDutyCycle+0x90>
    173e:	06 97       	sbiw	r24, 0x06	; 6
    1740:	09 f4       	brne	.+2      	; 0x1744 <TIMER2_u8SetPwmDutyCycle+0x8e>
    1742:	44 c0       	rjmp	.+136    	; 0x17cc <TIMER2_u8SetPwmDutyCycle+0x116>
    1744:	7c c0       	rjmp	.+248    	; 0x183e <TIMER2_u8SetPwmDutyCycle+0x188>
		{
		case TIMER2_PWM_INVERTING:
			TCCR2 &= TIMER2_COMP_MATCH_OUTPUT_MASK;
    1746:	85 e4       	ldi	r24, 0x45	; 69
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	fc 01       	movw	r30, r24
    174c:	20 81       	ld	r18, Z
    174e:	85 e4       	ldi	r24, 0x45	; 69
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	2f 7c       	andi	r18, 0xCF	; 207
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
			TCCR2 |= TIMER2_OC2_SET_ON_COMP_OR_INVERTING_MODE;
    1758:	85 e4       	ldi	r24, 0x45	; 69
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	fc 01       	movw	r30, r24
    175e:	20 81       	ld	r18, Z
    1760:	85 e4       	ldi	r24, 0x45	; 69
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	20 63       	ori	r18, 0x30	; 48
    1766:	fc 01       	movw	r30, r24
    1768:	20 83       	st	Z, r18
			OCR2 = TIMER2_MAX_VAL - ((u16)((u16)Copy_u32DutyCycle * (u16)TIMER2_MAX_VAL) / 100.0);
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4f ef       	ldi	r20, 0xFF	; 255
    1772:	42 9f       	mul	r20, r18
    1774:	c0 01       	movw	r24, r0
    1776:	43 9f       	mul	r20, r19
    1778:	90 0d       	add	r25, r0
    177a:	11 24       	eor	r1, r1
    177c:	cc 01       	movw	r24, r24
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	48 ec       	ldi	r20, 0xC8	; 200
    1794:	52 e4       	ldi	r21, 0x42	; 66
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__divsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9c 01       	movw	r18, r24
    17a4:	ad 01       	movw	r20, r26
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	8f e7       	ldi	r24, 0x7F	; 127
    17ac:	93 e4       	ldi	r25, 0x43	; 67
    17ae:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__subsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	03 e4       	ldi	r16, 0x43	; 67
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	80 83       	st	Z, r24
			break;
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <TIMER2_u8SetPwmDutyCycle+0x194>
		case TIMER2_PWM_NON_INVERTING:
			TCCR2 &= TIMER2_COMP_MATCH_OUTPUT_MASK;
    17cc:	85 e4       	ldi	r24, 0x45	; 69
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 81       	ld	r18, Z
    17d4:	85 e4       	ldi	r24, 0x45	; 69
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2f 7c       	andi	r18, 0xCF	; 207
    17da:	fc 01       	movw	r30, r24
    17dc:	20 83       	st	Z, r18
			TCCR2 |= TIMER2_OC2_CLR_ON_COMP_OR_NON_INVERTING_MODE;
    17de:	85 e4       	ldi	r24, 0x45	; 69
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 81       	ld	r18, Z
    17e6:	85 e4       	ldi	r24, 0x45	; 69
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	20 62       	ori	r18, 0x20	; 32
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
			OCR2 = ((u16)((u16)Copy_u32DutyCycle * (u16)TIMER2_MAX_VAL) / 100.0);
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4f ef       	ldi	r20, 0xFF	; 255
    17f8:	42 9f       	mul	r20, r18
    17fa:	c0 01       	movw	r24, r0
    17fc:	43 9f       	mul	r20, r19
    17fe:	90 0d       	add	r25, r0
    1800:	11 24       	eor	r1, r1
    1802:	cc 01       	movw	r24, r24
    1804:	a0 e0       	ldi	r26, 0x00	; 0
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	48 ec       	ldi	r20, 0xC8	; 200
    181a:	52 e4       	ldi	r21, 0x42	; 66
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__divsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	03 e4       	ldi	r16, 0x43	; 67
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	f8 01       	movw	r30, r16
    183a:	80 83       	st	Z, r24
			break;
    183c:	06 c0       	rjmp	.+12     	; 0x184a <TIMER2_u8SetPwmDutyCycle+0x194>
		default:
			Local_u8ErrorStatus = NOK;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	89 83       	std	Y+1, r24	; 0x01
			break;
    1842:	00 00       	nop
    1844:	02 c0       	rjmp	.+4      	; 0x184a <TIMER2_u8SetPwmDutyCycle+0x194>
		}
	}
	else
	{
		Local_u8ErrorStatus = NOK;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    184a:	89 81       	ldd	r24, Y+1	; 0x01
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	08 95       	ret

0000185e <TIMER2_u8SetPrescaler>:




u8 TIMER2_u8SetPrescaler(u8 Copy_u8PrescalerOption)
{
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	00 d0       	rcall	.+0      	; 0x1864 <TIMER2_u8SetPrescaler+0x6>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    186a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PrescalerOption <= TIMER2_EXTERNAL_CLK_T0_ON_RISING_EDGE)
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	88 30       	cpi	r24, 0x08	; 8
    1870:	a0 f4       	brcc	.+40     	; 0x189a <TIMER2_u8SetPrescaler+0x3c>
	{
		TCCR2 &= TIMER2_PRES_MASK;
    1872:	85 e4       	ldi	r24, 0x45	; 69
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	fc 01       	movw	r30, r24
    1878:	20 81       	ld	r18, Z
    187a:	85 e4       	ldi	r24, 0x45	; 69
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	28 7f       	andi	r18, 0xF8	; 248
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
		TCCR2 |= Copy_u8PrescalerOption;
    1884:	85 e4       	ldi	r24, 0x45	; 69
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	30 81       	ld	r19, Z
    188c:	85 e4       	ldi	r24, 0x45	; 69
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	2a 81       	ldd	r18, Y+2	; 0x02
    1892:	23 2b       	or	r18, r19
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <TIMER2_u8SetPrescaler+0x40>
	}
	else
	{
		Local_u8ErrorStatus = NOK;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    189e:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <TIMER2_voidStopTimer2>:

void TIMER2_voidStopTimer2(void)
{
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= TIMER2_PRES_MASK;
    18b2:	85 e4       	ldi	r24, 0x45	; 69
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 81       	ld	r18, Z
    18ba:	85 e4       	ldi	r24, 0x45	; 69
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	28 7f       	andi	r18, 0xF8	; 248
    18c0:	fc 01       	movw	r30, r24
    18c2:	20 83       	st	Z, r18
	TCCR2 |= TIMER2_PRES_STOPPED;
    18c4:	25 e4       	ldi	r18, 0x45	; 69
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	85 e4       	ldi	r24, 0x45	; 69
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	f9 01       	movw	r30, r18
    18ce:	20 81       	ld	r18, Z
    18d0:	fc 01       	movw	r30, r24
    18d2:	20 83       	st	Z, r18
}
    18d4:	00 00       	nop
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <TIMER2_voidSetCompareValue>:

void TIMER2_voidSetCompareValue(u8 Copy_u8CompareValue)
{
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	1f 92       	push	r1
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CompareValue;
    18e8:	83 e4       	ldi	r24, 0x43	; 67
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	29 81       	ldd	r18, Y+1	; 0x01
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
}
    18f2:	00 00       	nop
    18f4:	0f 90       	pop	r0
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <TIMER2_u8IntEnable>:


/* Interrupts */

u8 TIMER2_u8IntEnable(u8 Copy_u8InterruptType)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	00 d0       	rcall	.+0      	; 0x1902 <TIMER2_u8IntEnable+0x6>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    1908:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8InterruptType)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	8a 30       	cpi	r24, 0x0A	; 10
    1912:	91 05       	cpc	r25, r1
    1914:	19 f0       	breq	.+6      	; 0x191c <TIMER2_u8IntEnable+0x20>
    1916:	0b 97       	sbiw	r24, 0x0b	; 11
    1918:	59 f0       	breq	.+22     	; 0x1930 <TIMER2_u8IntEnable+0x34>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <TIMER2_u8IntEnable+0x48>
	{
	case TIMER2_OVERFLOW_INT:
		SET_BIT(TIMSK, TIMSK_TOIE2);
    191c:	89 e5       	ldi	r24, 0x59	; 89
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	fc 01       	movw	r30, r24
    1922:	20 81       	ld	r18, Z
    1924:	89 e5       	ldi	r24, 0x59	; 89
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	20 64       	ori	r18, 0x40	; 64
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
		break;
    192e:	0d c0       	rjmp	.+26     	; 0x194a <TIMER2_u8IntEnable+0x4e>
	case TIMER2_COMP_MATCH_INT:
		SET_BIT(TIMSK, TIMSK_OCIE2);
    1930:	89 e5       	ldi	r24, 0x59	; 89
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	fc 01       	movw	r30, r24
    1936:	20 81       	ld	r18, Z
    1938:	89 e5       	ldi	r24, 0x59	; 89
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	20 68       	ori	r18, 0x80	; 128
    193e:	fc 01       	movw	r30, r24
    1940:	20 83       	st	Z, r18
		break;
    1942:	03 c0       	rjmp	.+6      	; 0x194a <TIMER2_u8IntEnable+0x4e>
	default:
		Local_u8ErrorStatus = NOK;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	89 83       	std	Y+1, r24	; 0x01
		break;
    1948:	00 00       	nop
	}
	return Local_u8ErrorStatus;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <TIMER2_u8IntDisable>:



u8 TIMER2_u8IntDisable(u8 Copy_u8InterruptType)
{
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	00 d0       	rcall	.+0      	; 0x195c <TIMER2_u8IntDisable+0x6>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    1962:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8InterruptType)
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	8a 30       	cpi	r24, 0x0A	; 10
    196c:	91 05       	cpc	r25, r1
    196e:	19 f0       	breq	.+6      	; 0x1976 <TIMER2_u8IntDisable+0x20>
    1970:	0b 97       	sbiw	r24, 0x0b	; 11
    1972:	59 f0       	breq	.+22     	; 0x198a <TIMER2_u8IntDisable+0x34>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <TIMER2_u8IntDisable+0x48>
	{
	case TIMER2_OVERFLOW_INT:
		CLR_BIT(TIMSK, TIMSK_TOIE2);
    1976:	89 e5       	ldi	r24, 0x59	; 89
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	fc 01       	movw	r30, r24
    197c:	20 81       	ld	r18, Z
    197e:	89 e5       	ldi	r24, 0x59	; 89
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	2f 7b       	andi	r18, 0xBF	; 191
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
		break;
    1988:	0d c0       	rjmp	.+26     	; 0x19a4 <TIMER2_u8IntDisable+0x4e>
	case TIMER2_COMP_MATCH_INT:
		CLR_BIT(TIMSK, TIMSK_OCIE2);
    198a:	89 e5       	ldi	r24, 0x59	; 89
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	fc 01       	movw	r30, r24
    1990:	20 81       	ld	r18, Z
    1992:	89 e5       	ldi	r24, 0x59	; 89
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	2f 77       	andi	r18, 0x7F	; 127
    1998:	fc 01       	movw	r30, r24
    199a:	20 83       	st	Z, r18
		break;
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <TIMER2_u8IntDisable+0x4e>
	default:
		Local_u8ErrorStatus = NOK;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
		break;
    19a2:	00 00       	nop
	}
	return Local_u8ErrorStatus;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <TIMER2_u8SetCallBackCompMatch>:


/************* Callback Functions & ISRs****************/

u8 TIMER2_u8SetCallBackCompMatch(void (*Copy_pvCallBackFunc)(void))
{
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <TIMER2_u8SetCallBackCompMatch+0x6>
    19b6:	1f 92       	push	r1
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	9b 83       	std	Y+3, r25	; 0x03
    19be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    19c0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	89 2b       	or	r24, r25
    19c8:	39 f0       	breq	.+14     	; 0x19d8 <TIMER2_u8SetCallBackCompMatch+0x28>
	{
		TIMER2_pvCallBackFuncCompMatch = Copy_pvCallBackFunc;
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <TIMER2_pvCallBackFuncCompMatch+0x1>
    19d2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <TIMER2_pvCallBackFuncCompMatch>
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <TIMER2_u8SetCallBackCompMatch+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <TIMER2_u8SetCallBackOverflow>:

u8 TIMER2_u8SetCallBackOverflow(void (*Copy_pvCallBackFunc)(void))
{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <TIMER2_u8SetCallBackOverflow+0x6>
    19f0:	1f 92       	push	r1
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    19fa:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	89 2b       	or	r24, r25
    1a02:	39 f0       	breq	.+14     	; 0x1a12 <TIMER2_u8SetCallBackOverflow+0x28>
	{
		TIMER2_pvCallBackFuncOverflow = Copy_pvCallBackFunc;
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <TIMER2_pvCallBackFuncOverflow+0x1>
    1a0c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <TIMER2_pvCallBackFuncOverflow>
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <TIMER2_u8SetCallBackOverflow+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <__vector_4>:

/*CompMatch ISR*/
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	if (TIMER2_pvCallBackFuncCompMatch != NULL)
    1a4e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TIMER2_pvCallBackFuncCompMatch>
    1a52:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TIMER2_pvCallBackFuncCompMatch+0x1>
    1a56:	89 2b       	or	r24, r25
    1a58:	31 f0       	breq	.+12     	; 0x1a66 <__vector_4+0x42>
	{
		TIMER2_pvCallBackFuncCompMatch();
    1a5a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TIMER2_pvCallBackFuncCompMatch>
    1a5e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TIMER2_pvCallBackFuncCompMatch+0x1>
    1a62:	fc 01       	movw	r30, r24
    1a64:	09 95       	icall
	}
}
    1a66:	00 00       	nop
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	ff 91       	pop	r31
    1a6e:	ef 91       	pop	r30
    1a70:	bf 91       	pop	r27
    1a72:	af 91       	pop	r26
    1a74:	9f 91       	pop	r25
    1a76:	8f 91       	pop	r24
    1a78:	7f 91       	pop	r23
    1a7a:	6f 91       	pop	r22
    1a7c:	5f 91       	pop	r21
    1a7e:	4f 91       	pop	r20
    1a80:	3f 91       	pop	r19
    1a82:	2f 91       	pop	r18
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	0f 90       	pop	r0
    1a8a:	1f 90       	pop	r1
    1a8c:	18 95       	reti

00001a8e <__vector_5>:

/*Overflow ISR*/
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	af 93       	push	r26
    1aaa:	bf 93       	push	r27
    1aac:	ef 93       	push	r30
    1aae:	ff 93       	push	r31
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
	if (TIMER2_pvCallBackFuncOverflow != NULL)
    1ab8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <TIMER2_pvCallBackFuncOverflow>
    1abc:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <TIMER2_pvCallBackFuncOverflow+0x1>
    1ac0:	89 2b       	or	r24, r25
    1ac2:	31 f0       	breq	.+12     	; 0x1ad0 <__vector_5+0x42>
	{
		TIMER2_pvCallBackFuncOverflow();
    1ac4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <TIMER2_pvCallBackFuncOverflow>
    1ac8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <TIMER2_pvCallBackFuncOverflow+0x1>
    1acc:	fc 01       	movw	r30, r24
    1ace:	09 95       	icall
	}
}
    1ad0:	00 00       	nop
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	ff 91       	pop	r31
    1ad8:	ef 91       	pop	r30
    1ada:	bf 91       	pop	r27
    1adc:	af 91       	pop	r26
    1ade:	9f 91       	pop	r25
    1ae0:	8f 91       	pop	r24
    1ae2:	7f 91       	pop	r23
    1ae4:	6f 91       	pop	r22
    1ae6:	5f 91       	pop	r21
    1ae8:	4f 91       	pop	r20
    1aea:	3f 91       	pop	r19
    1aec:	2f 91       	pop	r18
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <main>:
#include "IR_interface.h"

#include "APP_interface.h"

void main(void)
{
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	aa 97       	sbiw	r28, 0x2a	; 42
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1b0c:	0e 94 6f 08 	call	0x10de	; 0x10de <PORT_voidInit>
	TIMER0_voidInit();
    1b10:	0e 94 9a 08 	call	0x1134	; 0x1134 <TIMER0_voidInit>
	TIMER2_voidInit();
    1b14:	0e 94 14 0b 	call	0x1628	; 0x1628 <TIMER2_voidInit>
	_delay_ms(2000);*/


	while (1)
	{
		APP_voidStop();
    1b18:	0e 94 86 00 	call	0x10c	; 0x10c <APP_voidStop>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	aa ef       	ldi	r26, 0xFA	; 250
    1b22:	b4 e4       	ldi	r27, 0x44	; 68
    1b24:	8d 8f       	std	Y+29, r24	; 0x1d
    1b26:	9e 8f       	std	Y+30, r25	; 0x1e
    1b28:	af 8f       	std	Y+31, r26	; 0x1f
    1b2a:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a ef       	ldi	r20, 0xFA	; 250
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b36:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	89 a3       	std	Y+33, r24	; 0x21
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	ab a3       	std	Y+35, r26	; 0x23
    1b4a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	69 a1       	ldd	r22, Y+33	; 0x21
    1b56:	7a a1       	ldd	r23, Y+34	; 0x22
    1b58:	8b a1       	ldd	r24, Y+35	; 0x23
    1b5a:	9c a1       	ldd	r25, Y+36	; 0x24
    1b5c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <main+0x76>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9e a3       	std	Y+38, r25	; 0x26
    1b6a:	8d a3       	std	Y+37, r24	; 0x25
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <main+0xf4>
	else if (__tmp > 65535)
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	69 a1       	ldd	r22, Y+33	; 0x21
    1b78:	7a a1       	ldd	r23, Y+34	; 0x22
    1b7a:	8b a1       	ldd	r24, Y+35	; 0x23
    1b7c:	9c a1       	ldd	r25, Y+36	; 0x24
    1b7e:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b94:	98 a1       	ldd	r25, Y+32	; 0x20
    1b96:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e a3       	std	Y+38, r25	; 0x26
    1bac:	8d a3       	std	Y+37, r24	; 0x25
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <main+0xd6>
    1bb0:	88 ec       	ldi	r24, 0xC8	; 200
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	98 a7       	std	Y+40, r25	; 0x28
    1bb6:	8f a3       	std	Y+39, r24	; 0x27
    1bb8:	8f a1       	ldd	r24, Y+39	; 0x27
    1bba:	98 a5       	ldd	r25, Y+40	; 0x28
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <main+0xc4>
    1bc0:	98 a7       	std	Y+40, r25	; 0x28
    1bc2:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9e a3       	std	Y+38, r25	; 0x26
    1bcc:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd2:	89 2b       	or	r24, r25
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <main+0xb8>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	69 a1       	ldd	r22, Y+33	; 0x21
    1bda:	7a a1       	ldd	r23, Y+34	; 0x22
    1bdc:	8b a1       	ldd	r24, Y+35	; 0x23
    1bde:	9c a1       	ldd	r25, Y+36	; 0x24
    1be0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9e a3       	std	Y+38, r25	; 0x26
    1bea:	8d a3       	std	Y+37, r24	; 0x25
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	9a a7       	std	Y+42, r25	; 0x2a
    1bf2:	89 a7       	std	Y+41, r24	; 0x29
    1bf4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <main+0x100>
    1bfc:	9a a7       	std	Y+42, r25	; 0x2a
    1bfe:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(2000);

		APP_u8GoToXY(1,2);
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 8b 04 	call	0x916	; 0x916 <APP_u8GoToXY>

		APP_voidMoveBackward();
    1c08:	0e 94 50 00 	call	0xa0	; 0xa0 <APP_voidMoveBackward>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	aa ef       	ldi	r26, 0xFA	; 250
    1c12:	b3 e4       	ldi	r27, 0x43	; 67
    1c14:	8f 87       	std	Y+15, r24	; 0x0f
    1c16:	98 8b       	std	Y+16, r25	; 0x10
    1c18:	a9 8b       	std	Y+17, r26	; 0x11
    1c1a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a ef       	ldi	r20, 0xFA	; 250
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c26:	78 89       	ldd	r23, Y+16	; 0x10
    1c28:	89 89       	ldd	r24, Y+17	; 0x11
    1c2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8b 8b       	std	Y+19, r24	; 0x13
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	ad 8b       	std	Y+21, r26	; 0x15
    1c3a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	6b 89       	ldd	r22, Y+19	; 0x13
    1c46:	7c 89       	ldd	r23, Y+20	; 0x14
    1c48:	8d 89       	ldd	r24, Y+21	; 0x15
    1c4a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c4c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <main+0x166>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	98 8f       	std	Y+24, r25	; 0x18
    1c5a:	8f 8b       	std	Y+23, r24	; 0x17
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <main+0x1e4>
	else if (__tmp > 65535)
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	57 e4       	ldi	r21, 0x47	; 71
    1c66:	6b 89       	ldd	r22, Y+19	; 0x13
    1c68:	7c 89       	ldd	r23, Y+20	; 0x14
    1c6a:	8d 89       	ldd	r24, Y+21	; 0x15
    1c6c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c6e:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c80:	78 89       	ldd	r23, Y+16	; 0x10
    1c82:	89 89       	ldd	r24, Y+17	; 0x11
    1c84:	9a 89       	ldd	r25, Y+18	; 0x12
    1c86:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	98 8f       	std	Y+24, r25	; 0x18
    1c9c:	8f 8b       	std	Y+23, r24	; 0x17
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <main+0x1c6>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca6:	89 8f       	std	Y+25, r24	; 0x19
    1ca8:	89 8d       	ldd	r24, Y+25	; 0x19
    1caa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <main+0x1b4>
    1cb0:	9a 8f       	std	Y+26, r25	; 0x1a
    1cb2:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	98 8f       	std	Y+24, r25	; 0x18
    1cbc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc2:	89 2b       	or	r24, r25
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <main+0x1a8>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <main+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6b 89       	ldd	r22, Y+19	; 0x13
    1cca:	7c 89       	ldd	r23, Y+20	; 0x14
    1ccc:	8d 89       	ldd	r24, Y+21	; 0x15
    1cce:	9e 89       	ldd	r25, Y+22	; 0x16
    1cd0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	98 8f       	std	Y+24, r25	; 0x18
    1cda:	8f 8b       	std	Y+23, r24	; 0x17
    1cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cde:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce0:	9c 8f       	std	Y+28, r25	; 0x1c
    1ce2:	8b 8f       	std	Y+27, r24	; 0x1b
    1ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <main+0x1f0>
    1cec:	9c 8f       	std	Y+28, r25	; 0x1c
    1cee:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(500);
		APP_voidStop();
    1cf0:	0e 94 86 00 	call	0x10c	; 0x10c <APP_voidStop>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	aa ef       	ldi	r26, 0xFA	; 250
    1cfa:	b4 e4       	ldi	r27, 0x44	; 68
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	ab 83       	std	Y+3, r26	; 0x03
    1d02:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a ef       	ldi	r20, 0xFA	; 250
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	69 81       	ldd	r22, Y+1	; 0x01
    1d0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	af 83       	std	Y+7, r26	; 0x07
    1d22:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d30:	8f 81       	ldd	r24, Y+7	; 0x07
    1d32:	98 85       	ldd	r25, Y+8	; 0x08
    1d34:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__cmpsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <main+0x24e>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9a 87       	std	Y+10, r25	; 0x0a
    1d42:	89 87       	std	Y+9, r24	; 0x09
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <main+0x2cc>
	else if (__tmp > 65535)
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d50:	7e 81       	ldd	r23, Y+6	; 0x06
    1d52:	8f 81       	ldd	r24, Y+7	; 0x07
    1d54:	98 85       	ldd	r25, Y+8	; 0x08
    1d56:	0e 94 b6 10 	call	0x216c	; 0x216c <__gesf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <main+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e2       	ldi	r20, 0x20	; 32
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	69 81       	ldd	r22, Y+1	; 0x01
    1d68:	7a 81       	ldd	r23, Y+2	; 0x02
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9a 87       	std	Y+10, r25	; 0x0a
    1d84:	89 87       	std	Y+9, r24	; 0x09
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <main+0x2ae>
    1d88:	88 ec       	ldi	r24, 0xC8	; 200
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	8b 87       	std	Y+11, r24	; 0x0b
    1d90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <main+0x29c>
    1d98:	9c 87       	std	Y+12, r25	; 0x0c
    1d9a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	9a 87       	std	Y+10, r25	; 0x0a
    1da4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	89 2b       	or	r24, r25
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <main+0x290>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <main+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	6d 81       	ldd	r22, Y+5	; 0x05
    1db2:	7e 81       	ldd	r23, Y+6	; 0x06
    1db4:	8f 81       	ldd	r24, Y+7	; 0x07
    1db6:	98 85       	ldd	r25, Y+8	; 0x08
    1db8:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9a 87       	std	Y+10, r25	; 0x0a
    1dc2:	89 87       	std	Y+9, r24	; 0x09
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	9e 87       	std	Y+14, r25	; 0x0e
    1dca:	8d 87       	std	Y+13, r24	; 0x0d
    1dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <main+0x2d8>
    1dd4:	9e 87       	std	Y+14, r25	; 0x0e
    1dd6:	8d 87       	std	Y+13, r24	; 0x0d

		_delay_ms(2000);

		APP_u8GoToXY(0,0);
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	0e 94 8b 04 	call	0x916	; 0x916 <APP_u8GoToXY>
	_delay_ms(2000);*/


	while (1)
	{
		APP_voidStop();
    1de0:	9b ce       	rjmp	.-714    	; 0x1b18 <main+0x20>

00001de2 <__subsf3>:
    1de2:	50 58       	subi	r21, 0x80	; 128

00001de4 <__addsf3>:
    1de4:	bb 27       	eor	r27, r27
    1de6:	aa 27       	eor	r26, r26
    1de8:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__addsf3x>
    1dec:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__fp_round>
    1df0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fp_pscA>
    1df4:	38 f0       	brcs	.+14     	; 0x1e04 <__addsf3+0x20>
    1df6:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_pscB>
    1dfa:	20 f0       	brcs	.+8      	; 0x1e04 <__addsf3+0x20>
    1dfc:	39 f4       	brne	.+14     	; 0x1e0c <__addsf3+0x28>
    1dfe:	9f 3f       	cpi	r25, 0xFF	; 255
    1e00:	19 f4       	brne	.+6      	; 0x1e08 <__addsf3+0x24>
    1e02:	26 f4       	brtc	.+8      	; 0x1e0c <__addsf3+0x28>
    1e04:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__fp_nan>
    1e08:	0e f4       	brtc	.+2      	; 0x1e0c <__addsf3+0x28>
    1e0a:	e0 95       	com	r30
    1e0c:	e7 fb       	bst	r30, 7
    1e0e:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_inf>

00001e12 <__addsf3x>:
    1e12:	e9 2f       	mov	r30, r25
    1e14:	0e 94 8d 10 	call	0x211a	; 0x211a <__fp_split3>
    1e18:	58 f3       	brcs	.-42     	; 0x1df0 <__addsf3+0xc>
    1e1a:	ba 17       	cp	r27, r26
    1e1c:	62 07       	cpc	r22, r18
    1e1e:	73 07       	cpc	r23, r19
    1e20:	84 07       	cpc	r24, r20
    1e22:	95 07       	cpc	r25, r21
    1e24:	20 f0       	brcs	.+8      	; 0x1e2e <__addsf3x+0x1c>
    1e26:	79 f4       	brne	.+30     	; 0x1e46 <__addsf3x+0x34>
    1e28:	a6 f5       	brtc	.+104    	; 0x1e92 <__addsf3x+0x80>
    1e2a:	0c 94 af 10 	jmp	0x215e	; 0x215e <__fp_zero>
    1e2e:	0e f4       	brtc	.+2      	; 0x1e32 <__addsf3x+0x20>
    1e30:	e0 95       	com	r30
    1e32:	0b 2e       	mov	r0, r27
    1e34:	ba 2f       	mov	r27, r26
    1e36:	a0 2d       	mov	r26, r0
    1e38:	0b 01       	movw	r0, r22
    1e3a:	b9 01       	movw	r22, r18
    1e3c:	90 01       	movw	r18, r0
    1e3e:	0c 01       	movw	r0, r24
    1e40:	ca 01       	movw	r24, r20
    1e42:	a0 01       	movw	r20, r0
    1e44:	11 24       	eor	r1, r1
    1e46:	ff 27       	eor	r31, r31
    1e48:	59 1b       	sub	r21, r25
    1e4a:	99 f0       	breq	.+38     	; 0x1e72 <__addsf3x+0x60>
    1e4c:	59 3f       	cpi	r21, 0xF9	; 249
    1e4e:	50 f4       	brcc	.+20     	; 0x1e64 <__addsf3x+0x52>
    1e50:	50 3e       	cpi	r21, 0xE0	; 224
    1e52:	68 f1       	brcs	.+90     	; 0x1eae <__addsf3x+0x9c>
    1e54:	1a 16       	cp	r1, r26
    1e56:	f0 40       	sbci	r31, 0x00	; 0
    1e58:	a2 2f       	mov	r26, r18
    1e5a:	23 2f       	mov	r18, r19
    1e5c:	34 2f       	mov	r19, r20
    1e5e:	44 27       	eor	r20, r20
    1e60:	58 5f       	subi	r21, 0xF8	; 248
    1e62:	f3 cf       	rjmp	.-26     	; 0x1e4a <__addsf3x+0x38>
    1e64:	46 95       	lsr	r20
    1e66:	37 95       	ror	r19
    1e68:	27 95       	ror	r18
    1e6a:	a7 95       	ror	r26
    1e6c:	f0 40       	sbci	r31, 0x00	; 0
    1e6e:	53 95       	inc	r21
    1e70:	c9 f7       	brne	.-14     	; 0x1e64 <__addsf3x+0x52>
    1e72:	7e f4       	brtc	.+30     	; 0x1e92 <__addsf3x+0x80>
    1e74:	1f 16       	cp	r1, r31
    1e76:	ba 0b       	sbc	r27, r26
    1e78:	62 0b       	sbc	r22, r18
    1e7a:	73 0b       	sbc	r23, r19
    1e7c:	84 0b       	sbc	r24, r20
    1e7e:	ba f0       	brmi	.+46     	; 0x1eae <__addsf3x+0x9c>
    1e80:	91 50       	subi	r25, 0x01	; 1
    1e82:	a1 f0       	breq	.+40     	; 0x1eac <__addsf3x+0x9a>
    1e84:	ff 0f       	add	r31, r31
    1e86:	bb 1f       	adc	r27, r27
    1e88:	66 1f       	adc	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	c2 f7       	brpl	.-16     	; 0x1e80 <__addsf3x+0x6e>
    1e90:	0e c0       	rjmp	.+28     	; 0x1eae <__addsf3x+0x9c>
    1e92:	ba 0f       	add	r27, r26
    1e94:	62 1f       	adc	r22, r18
    1e96:	73 1f       	adc	r23, r19
    1e98:	84 1f       	adc	r24, r20
    1e9a:	48 f4       	brcc	.+18     	; 0x1eae <__addsf3x+0x9c>
    1e9c:	87 95       	ror	r24
    1e9e:	77 95       	ror	r23
    1ea0:	67 95       	ror	r22
    1ea2:	b7 95       	ror	r27
    1ea4:	f7 95       	ror	r31
    1ea6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ea8:	08 f0       	brcs	.+2      	; 0x1eac <__addsf3x+0x9a>
    1eaa:	b0 cf       	rjmp	.-160    	; 0x1e0c <__addsf3+0x28>
    1eac:	93 95       	inc	r25
    1eae:	88 0f       	add	r24, r24
    1eb0:	08 f0       	brcs	.+2      	; 0x1eb4 <__addsf3x+0xa2>
    1eb2:	99 27       	eor	r25, r25
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	97 95       	ror	r25
    1eb8:	87 95       	ror	r24
    1eba:	08 95       	ret

00001ebc <__cmpsf2>:
    1ebc:	0e 94 41 10 	call	0x2082	; 0x2082 <__fp_cmp>
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <__cmpsf2+0x8>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	08 95       	ret

00001ec6 <__divsf3>:
    1ec6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__divsf3x>
    1eca:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__fp_round>
    1ece:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_pscB>
    1ed2:	58 f0       	brcs	.+22     	; 0x1eea <__divsf3+0x24>
    1ed4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fp_pscA>
    1ed8:	40 f0       	brcs	.+16     	; 0x1eea <__divsf3+0x24>
    1eda:	29 f4       	brne	.+10     	; 0x1ee6 <__divsf3+0x20>
    1edc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ede:	29 f0       	breq	.+10     	; 0x1eea <__divsf3+0x24>
    1ee0:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_inf>
    1ee4:	51 11       	cpse	r21, r1
    1ee6:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__fp_szero>
    1eea:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__fp_nan>

00001eee <__divsf3x>:
    1eee:	0e 94 8d 10 	call	0x211a	; 0x211a <__fp_split3>
    1ef2:	68 f3       	brcs	.-38     	; 0x1ece <__divsf3+0x8>

00001ef4 <__divsf3_pse>:
    1ef4:	99 23       	and	r25, r25
    1ef6:	b1 f3       	breq	.-20     	; 0x1ee4 <__divsf3+0x1e>
    1ef8:	55 23       	and	r21, r21
    1efa:	91 f3       	breq	.-28     	; 0x1ee0 <__divsf3+0x1a>
    1efc:	95 1b       	sub	r25, r21
    1efe:	55 0b       	sbc	r21, r21
    1f00:	bb 27       	eor	r27, r27
    1f02:	aa 27       	eor	r26, r26
    1f04:	62 17       	cp	r22, r18
    1f06:	73 07       	cpc	r23, r19
    1f08:	84 07       	cpc	r24, r20
    1f0a:	38 f0       	brcs	.+14     	; 0x1f1a <__divsf3_pse+0x26>
    1f0c:	9f 5f       	subi	r25, 0xFF	; 255
    1f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	44 1f       	adc	r20, r20
    1f16:	aa 1f       	adc	r26, r26
    1f18:	a9 f3       	breq	.-22     	; 0x1f04 <__divsf3_pse+0x10>
    1f1a:	35 d0       	rcall	.+106    	; 0x1f86 <__divsf3_pse+0x92>
    1f1c:	0e 2e       	mov	r0, r30
    1f1e:	3a f0       	brmi	.+14     	; 0x1f2e <__divsf3_pse+0x3a>
    1f20:	e0 e8       	ldi	r30, 0x80	; 128
    1f22:	32 d0       	rcall	.+100    	; 0x1f88 <__divsf3_pse+0x94>
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	50 40       	sbci	r21, 0x00	; 0
    1f28:	e6 95       	lsr	r30
    1f2a:	00 1c       	adc	r0, r0
    1f2c:	ca f7       	brpl	.-14     	; 0x1f20 <__divsf3_pse+0x2c>
    1f2e:	2b d0       	rcall	.+86     	; 0x1f86 <__divsf3_pse+0x92>
    1f30:	fe 2f       	mov	r31, r30
    1f32:	29 d0       	rcall	.+82     	; 0x1f86 <__divsf3_pse+0x92>
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	bb 1f       	adc	r27, r27
    1f3c:	26 17       	cp	r18, r22
    1f3e:	37 07       	cpc	r19, r23
    1f40:	48 07       	cpc	r20, r24
    1f42:	ab 07       	cpc	r26, r27
    1f44:	b0 e8       	ldi	r27, 0x80	; 128
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <__divsf3_pse+0x56>
    1f48:	bb 0b       	sbc	r27, r27
    1f4a:	80 2d       	mov	r24, r0
    1f4c:	bf 01       	movw	r22, r30
    1f4e:	ff 27       	eor	r31, r31
    1f50:	93 58       	subi	r25, 0x83	; 131
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
    1f54:	3a f0       	brmi	.+14     	; 0x1f64 <__divsf3_pse+0x70>
    1f56:	9e 3f       	cpi	r25, 0xFE	; 254
    1f58:	51 05       	cpc	r21, r1
    1f5a:	78 f0       	brcs	.+30     	; 0x1f7a <__divsf3_pse+0x86>
    1f5c:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_inf>
    1f60:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__fp_szero>
    1f64:	5f 3f       	cpi	r21, 0xFF	; 255
    1f66:	e4 f3       	brlt	.-8      	; 0x1f60 <__divsf3_pse+0x6c>
    1f68:	98 3e       	cpi	r25, 0xE8	; 232
    1f6a:	d4 f3       	brlt	.-12     	; 0x1f60 <__divsf3_pse+0x6c>
    1f6c:	86 95       	lsr	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	b7 95       	ror	r27
    1f74:	f7 95       	ror	r31
    1f76:	9f 5f       	subi	r25, 0xFF	; 255
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__divsf3_pse+0x78>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	91 1d       	adc	r25, r1
    1f7e:	96 95       	lsr	r25
    1f80:	87 95       	ror	r24
    1f82:	97 f9       	bld	r25, 7
    1f84:	08 95       	ret
    1f86:	e1 e0       	ldi	r30, 0x01	; 1
    1f88:	66 0f       	add	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	62 17       	cp	r22, r18
    1f92:	73 07       	cpc	r23, r19
    1f94:	84 07       	cpc	r24, r20
    1f96:	ba 07       	cpc	r27, r26
    1f98:	20 f0       	brcs	.+8      	; 0x1fa2 <__divsf3_pse+0xae>
    1f9a:	62 1b       	sub	r22, r18
    1f9c:	73 0b       	sbc	r23, r19
    1f9e:	84 0b       	sbc	r24, r20
    1fa0:	ba 0b       	sbc	r27, r26
    1fa2:	ee 1f       	adc	r30, r30
    1fa4:	88 f7       	brcc	.-30     	; 0x1f88 <__divsf3_pse+0x94>
    1fa6:	e0 95       	com	r30
    1fa8:	08 95       	ret

00001faa <__fixunssfsi>:
    1faa:	0e 94 95 10 	call	0x212a	; 0x212a <__fp_splitA>
    1fae:	88 f0       	brcs	.+34     	; 0x1fd2 <__fixunssfsi+0x28>
    1fb0:	9f 57       	subi	r25, 0x7F	; 127
    1fb2:	98 f0       	brcs	.+38     	; 0x1fda <__fixunssfsi+0x30>
    1fb4:	b9 2f       	mov	r27, r25
    1fb6:	99 27       	eor	r25, r25
    1fb8:	b7 51       	subi	r27, 0x17	; 23
    1fba:	b0 f0       	brcs	.+44     	; 0x1fe8 <__fixunssfsi+0x3e>
    1fbc:	e1 f0       	breq	.+56     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fbe:	66 0f       	add	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	1a f0       	brmi	.+6      	; 0x1fce <__fixunssfsi+0x24>
    1fc8:	ba 95       	dec	r27
    1fca:	c9 f7       	brne	.-14     	; 0x1fbe <__fixunssfsi+0x14>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fce:	b1 30       	cpi	r27, 0x01	; 1
    1fd0:	91 f0       	breq	.+36     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fd2:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_zero>
    1fd6:	b1 e0       	ldi	r27, 0x01	; 1
    1fd8:	08 95       	ret
    1fda:	0c 94 af 10 	jmp	0x215e	; 0x215e <__fp_zero>
    1fde:	67 2f       	mov	r22, r23
    1fe0:	78 2f       	mov	r23, r24
    1fe2:	88 27       	eor	r24, r24
    1fe4:	b8 5f       	subi	r27, 0xF8	; 248
    1fe6:	39 f0       	breq	.+14     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fe8:	b9 3f       	cpi	r27, 0xF9	; 249
    1fea:	cc f3       	brlt	.-14     	; 0x1fde <__fixunssfsi+0x34>
    1fec:	86 95       	lsr	r24
    1fee:	77 95       	ror	r23
    1ff0:	67 95       	ror	r22
    1ff2:	b3 95       	inc	r27
    1ff4:	d9 f7       	brne	.-10     	; 0x1fec <__fixunssfsi+0x42>
    1ff6:	3e f4       	brtc	.+14     	; 0x2006 <__fixunssfsi+0x5c>
    1ff8:	90 95       	com	r25
    1ffa:	80 95       	com	r24
    1ffc:	70 95       	com	r23
    1ffe:	61 95       	neg	r22
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	08 95       	ret

00002008 <__floatunsisf>:
    2008:	e8 94       	clt
    200a:	09 c0       	rjmp	.+18     	; 0x201e <__floatsisf+0x12>

0000200c <__floatsisf>:
    200c:	97 fb       	bst	r25, 7
    200e:	3e f4       	brtc	.+14     	; 0x201e <__floatsisf+0x12>
    2010:	90 95       	com	r25
    2012:	80 95       	com	r24
    2014:	70 95       	com	r23
    2016:	61 95       	neg	r22
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8f 4f       	sbci	r24, 0xFF	; 255
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	99 23       	and	r25, r25
    2020:	a9 f0       	breq	.+42     	; 0x204c <__floatsisf+0x40>
    2022:	f9 2f       	mov	r31, r25
    2024:	96 e9       	ldi	r25, 0x96	; 150
    2026:	bb 27       	eor	r27, r27
    2028:	93 95       	inc	r25
    202a:	f6 95       	lsr	r31
    202c:	87 95       	ror	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b7 95       	ror	r27
    2034:	f1 11       	cpse	r31, r1
    2036:	f8 cf       	rjmp	.-16     	; 0x2028 <__floatsisf+0x1c>
    2038:	fa f4       	brpl	.+62     	; 0x2078 <__floatsisf+0x6c>
    203a:	bb 0f       	add	r27, r27
    203c:	11 f4       	brne	.+4      	; 0x2042 <__floatsisf+0x36>
    203e:	60 ff       	sbrs	r22, 0
    2040:	1b c0       	rjmp	.+54     	; 0x2078 <__floatsisf+0x6c>
    2042:	6f 5f       	subi	r22, 0xFF	; 255
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	16 c0       	rjmp	.+44     	; 0x2078 <__floatsisf+0x6c>
    204c:	88 23       	and	r24, r24
    204e:	11 f0       	breq	.+4      	; 0x2054 <__floatsisf+0x48>
    2050:	96 e9       	ldi	r25, 0x96	; 150
    2052:	11 c0       	rjmp	.+34     	; 0x2076 <__floatsisf+0x6a>
    2054:	77 23       	and	r23, r23
    2056:	21 f0       	breq	.+8      	; 0x2060 <__floatsisf+0x54>
    2058:	9e e8       	ldi	r25, 0x8E	; 142
    205a:	87 2f       	mov	r24, r23
    205c:	76 2f       	mov	r23, r22
    205e:	05 c0       	rjmp	.+10     	; 0x206a <__floatsisf+0x5e>
    2060:	66 23       	and	r22, r22
    2062:	71 f0       	breq	.+28     	; 0x2080 <__floatsisf+0x74>
    2064:	96 e8       	ldi	r25, 0x86	; 134
    2066:	86 2f       	mov	r24, r22
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	2a f0       	brmi	.+10     	; 0x2078 <__floatsisf+0x6c>
    206e:	9a 95       	dec	r25
    2070:	66 0f       	add	r22, r22
    2072:	77 1f       	adc	r23, r23
    2074:	88 1f       	adc	r24, r24
    2076:	da f7       	brpl	.-10     	; 0x206e <__floatsisf+0x62>
    2078:	88 0f       	add	r24, r24
    207a:	96 95       	lsr	r25
    207c:	87 95       	ror	r24
    207e:	97 f9       	bld	r25, 7
    2080:	08 95       	ret

00002082 <__fp_cmp>:
    2082:	99 0f       	add	r25, r25
    2084:	00 08       	sbc	r0, r0
    2086:	55 0f       	add	r21, r21
    2088:	aa 0b       	sbc	r26, r26
    208a:	e0 e8       	ldi	r30, 0x80	; 128
    208c:	fe ef       	ldi	r31, 0xFE	; 254
    208e:	16 16       	cp	r1, r22
    2090:	17 06       	cpc	r1, r23
    2092:	e8 07       	cpc	r30, r24
    2094:	f9 07       	cpc	r31, r25
    2096:	c0 f0       	brcs	.+48     	; 0x20c8 <__fp_cmp+0x46>
    2098:	12 16       	cp	r1, r18
    209a:	13 06       	cpc	r1, r19
    209c:	e4 07       	cpc	r30, r20
    209e:	f5 07       	cpc	r31, r21
    20a0:	98 f0       	brcs	.+38     	; 0x20c8 <__fp_cmp+0x46>
    20a2:	62 1b       	sub	r22, r18
    20a4:	73 0b       	sbc	r23, r19
    20a6:	84 0b       	sbc	r24, r20
    20a8:	95 0b       	sbc	r25, r21
    20aa:	39 f4       	brne	.+14     	; 0x20ba <__fp_cmp+0x38>
    20ac:	0a 26       	eor	r0, r26
    20ae:	61 f0       	breq	.+24     	; 0x20c8 <__fp_cmp+0x46>
    20b0:	23 2b       	or	r18, r19
    20b2:	24 2b       	or	r18, r20
    20b4:	25 2b       	or	r18, r21
    20b6:	21 f4       	brne	.+8      	; 0x20c0 <__fp_cmp+0x3e>
    20b8:	08 95       	ret
    20ba:	0a 26       	eor	r0, r26
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <__fp_cmp+0x3e>
    20be:	a1 40       	sbci	r26, 0x01	; 1
    20c0:	a6 95       	lsr	r26
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	81 1d       	adc	r24, r1
    20c6:	81 1d       	adc	r24, r1
    20c8:	08 95       	ret

000020ca <__fp_inf>:
    20ca:	97 f9       	bld	r25, 7
    20cc:	9f 67       	ori	r25, 0x7F	; 127
    20ce:	80 e8       	ldi	r24, 0x80	; 128
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	08 95       	ret

000020d6 <__fp_nan>:
    20d6:	9f ef       	ldi	r25, 0xFF	; 255
    20d8:	80 ec       	ldi	r24, 0xC0	; 192
    20da:	08 95       	ret

000020dc <__fp_pscA>:
    20dc:	00 24       	eor	r0, r0
    20de:	0a 94       	dec	r0
    20e0:	16 16       	cp	r1, r22
    20e2:	17 06       	cpc	r1, r23
    20e4:	18 06       	cpc	r1, r24
    20e6:	09 06       	cpc	r0, r25
    20e8:	08 95       	ret

000020ea <__fp_pscB>:
    20ea:	00 24       	eor	r0, r0
    20ec:	0a 94       	dec	r0
    20ee:	12 16       	cp	r1, r18
    20f0:	13 06       	cpc	r1, r19
    20f2:	14 06       	cpc	r1, r20
    20f4:	05 06       	cpc	r0, r21
    20f6:	08 95       	ret

000020f8 <__fp_round>:
    20f8:	09 2e       	mov	r0, r25
    20fa:	03 94       	inc	r0
    20fc:	00 0c       	add	r0, r0
    20fe:	11 f4       	brne	.+4      	; 0x2104 <__fp_round+0xc>
    2100:	88 23       	and	r24, r24
    2102:	52 f0       	brmi	.+20     	; 0x2118 <__fp_round+0x20>
    2104:	bb 0f       	add	r27, r27
    2106:	40 f4       	brcc	.+16     	; 0x2118 <__fp_round+0x20>
    2108:	bf 2b       	or	r27, r31
    210a:	11 f4       	brne	.+4      	; 0x2110 <__fp_round+0x18>
    210c:	60 ff       	sbrs	r22, 0
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <__fp_round+0x20>
    2110:	6f 5f       	subi	r22, 0xFF	; 255
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	8f 4f       	sbci	r24, 0xFF	; 255
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	08 95       	ret

0000211a <__fp_split3>:
    211a:	57 fd       	sbrc	r21, 7
    211c:	90 58       	subi	r25, 0x80	; 128
    211e:	44 0f       	add	r20, r20
    2120:	55 1f       	adc	r21, r21
    2122:	59 f0       	breq	.+22     	; 0x213a <__fp_splitA+0x10>
    2124:	5f 3f       	cpi	r21, 0xFF	; 255
    2126:	71 f0       	breq	.+28     	; 0x2144 <__fp_splitA+0x1a>
    2128:	47 95       	ror	r20

0000212a <__fp_splitA>:
    212a:	88 0f       	add	r24, r24
    212c:	97 fb       	bst	r25, 7
    212e:	99 1f       	adc	r25, r25
    2130:	61 f0       	breq	.+24     	; 0x214a <__fp_splitA+0x20>
    2132:	9f 3f       	cpi	r25, 0xFF	; 255
    2134:	79 f0       	breq	.+30     	; 0x2154 <__fp_splitA+0x2a>
    2136:	87 95       	ror	r24
    2138:	08 95       	ret
    213a:	12 16       	cp	r1, r18
    213c:	13 06       	cpc	r1, r19
    213e:	14 06       	cpc	r1, r20
    2140:	55 1f       	adc	r21, r21
    2142:	f2 cf       	rjmp	.-28     	; 0x2128 <__fp_split3+0xe>
    2144:	46 95       	lsr	r20
    2146:	f1 df       	rcall	.-30     	; 0x212a <__fp_splitA>
    2148:	08 c0       	rjmp	.+16     	; 0x215a <__fp_splitA+0x30>
    214a:	16 16       	cp	r1, r22
    214c:	17 06       	cpc	r1, r23
    214e:	18 06       	cpc	r1, r24
    2150:	99 1f       	adc	r25, r25
    2152:	f1 cf       	rjmp	.-30     	; 0x2136 <__fp_splitA+0xc>
    2154:	86 95       	lsr	r24
    2156:	71 05       	cpc	r23, r1
    2158:	61 05       	cpc	r22, r1
    215a:	08 94       	sec
    215c:	08 95       	ret

0000215e <__fp_zero>:
    215e:	e8 94       	clt

00002160 <__fp_szero>:
    2160:	bb 27       	eor	r27, r27
    2162:	66 27       	eor	r22, r22
    2164:	77 27       	eor	r23, r23
    2166:	cb 01       	movw	r24, r22
    2168:	97 f9       	bld	r25, 7
    216a:	08 95       	ret

0000216c <__gesf2>:
    216c:	0e 94 41 10 	call	0x2082	; 0x2082 <__fp_cmp>
    2170:	08 f4       	brcc	.+2      	; 0x2174 <__gesf2+0x8>
    2172:	8f ef       	ldi	r24, 0xFF	; 255
    2174:	08 95       	ret

00002176 <__mulsf3>:
    2176:	0e 94 ce 10 	call	0x219c	; 0x219c <__mulsf3x>
    217a:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__fp_round>
    217e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fp_pscA>
    2182:	38 f0       	brcs	.+14     	; 0x2192 <__mulsf3+0x1c>
    2184:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_pscB>
    2188:	20 f0       	brcs	.+8      	; 0x2192 <__mulsf3+0x1c>
    218a:	95 23       	and	r25, r21
    218c:	11 f0       	breq	.+4      	; 0x2192 <__mulsf3+0x1c>
    218e:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_inf>
    2192:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__fp_nan>
    2196:	11 24       	eor	r1, r1
    2198:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__fp_szero>

0000219c <__mulsf3x>:
    219c:	0e 94 8d 10 	call	0x211a	; 0x211a <__fp_split3>
    21a0:	70 f3       	brcs	.-36     	; 0x217e <__mulsf3+0x8>

000021a2 <__mulsf3_pse>:
    21a2:	95 9f       	mul	r25, r21
    21a4:	c1 f3       	breq	.-16     	; 0x2196 <__mulsf3+0x20>
    21a6:	95 0f       	add	r25, r21
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	55 1f       	adc	r21, r21
    21ac:	62 9f       	mul	r22, r18
    21ae:	f0 01       	movw	r30, r0
    21b0:	72 9f       	mul	r23, r18
    21b2:	bb 27       	eor	r27, r27
    21b4:	f0 0d       	add	r31, r0
    21b6:	b1 1d       	adc	r27, r1
    21b8:	63 9f       	mul	r22, r19
    21ba:	aa 27       	eor	r26, r26
    21bc:	f0 0d       	add	r31, r0
    21be:	b1 1d       	adc	r27, r1
    21c0:	aa 1f       	adc	r26, r26
    21c2:	64 9f       	mul	r22, r20
    21c4:	66 27       	eor	r22, r22
    21c6:	b0 0d       	add	r27, r0
    21c8:	a1 1d       	adc	r26, r1
    21ca:	66 1f       	adc	r22, r22
    21cc:	82 9f       	mul	r24, r18
    21ce:	22 27       	eor	r18, r18
    21d0:	b0 0d       	add	r27, r0
    21d2:	a1 1d       	adc	r26, r1
    21d4:	62 1f       	adc	r22, r18
    21d6:	73 9f       	mul	r23, r19
    21d8:	b0 0d       	add	r27, r0
    21da:	a1 1d       	adc	r26, r1
    21dc:	62 1f       	adc	r22, r18
    21de:	83 9f       	mul	r24, r19
    21e0:	a0 0d       	add	r26, r0
    21e2:	61 1d       	adc	r22, r1
    21e4:	22 1f       	adc	r18, r18
    21e6:	74 9f       	mul	r23, r20
    21e8:	33 27       	eor	r19, r19
    21ea:	a0 0d       	add	r26, r0
    21ec:	61 1d       	adc	r22, r1
    21ee:	23 1f       	adc	r18, r19
    21f0:	84 9f       	mul	r24, r20
    21f2:	60 0d       	add	r22, r0
    21f4:	21 1d       	adc	r18, r1
    21f6:	82 2f       	mov	r24, r18
    21f8:	76 2f       	mov	r23, r22
    21fa:	6a 2f       	mov	r22, r26
    21fc:	11 24       	eor	r1, r1
    21fe:	9f 57       	subi	r25, 0x7F	; 127
    2200:	50 40       	sbci	r21, 0x00	; 0
    2202:	9a f0       	brmi	.+38     	; 0x222a <__mulsf3_pse+0x88>
    2204:	f1 f0       	breq	.+60     	; 0x2242 <__mulsf3_pse+0xa0>
    2206:	88 23       	and	r24, r24
    2208:	4a f0       	brmi	.+18     	; 0x221c <__mulsf3_pse+0x7a>
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	bb 1f       	adc	r27, r27
    2210:	66 1f       	adc	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	88 1f       	adc	r24, r24
    2216:	91 50       	subi	r25, 0x01	; 1
    2218:	50 40       	sbci	r21, 0x00	; 0
    221a:	a9 f7       	brne	.-22     	; 0x2206 <__mulsf3_pse+0x64>
    221c:	9e 3f       	cpi	r25, 0xFE	; 254
    221e:	51 05       	cpc	r21, r1
    2220:	80 f0       	brcs	.+32     	; 0x2242 <__mulsf3_pse+0xa0>
    2222:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_inf>
    2226:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__fp_szero>
    222a:	5f 3f       	cpi	r21, 0xFF	; 255
    222c:	e4 f3       	brlt	.-8      	; 0x2226 <__mulsf3_pse+0x84>
    222e:	98 3e       	cpi	r25, 0xE8	; 232
    2230:	d4 f3       	brlt	.-12     	; 0x2226 <__mulsf3_pse+0x84>
    2232:	86 95       	lsr	r24
    2234:	77 95       	ror	r23
    2236:	67 95       	ror	r22
    2238:	b7 95       	ror	r27
    223a:	f7 95       	ror	r31
    223c:	e7 95       	ror	r30
    223e:	9f 5f       	subi	r25, 0xFF	; 255
    2240:	c1 f7       	brne	.-16     	; 0x2232 <__mulsf3_pse+0x90>
    2242:	fe 2b       	or	r31, r30
    2244:	88 0f       	add	r24, r24
    2246:	91 1d       	adc	r25, r1
    2248:	96 95       	lsr	r25
    224a:	87 95       	ror	r24
    224c:	97 f9       	bld	r25, 7
    224e:	08 95       	ret

00002250 <_exit>:
    2250:	f8 94       	cli

00002252 <__stop_program>:
    2252:	ff cf       	rjmp	.-2      	; 0x2252 <__stop_program>
